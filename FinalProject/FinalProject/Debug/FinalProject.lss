
FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000bc0  00000c54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bc0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  0080010a  0080010a  00000c5e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c5e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c90  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010c3  00000000  00000000  00000d88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009f2  00000000  00000000  00001e4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a33  00000000  00000000  0000283d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000188  00000000  00000000  00003270  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006a1  00000000  00000000  000033f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003f8  00000000  00000000  00003a99  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003e91  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	56 c0       	rjmp	.+172    	; 0xae <__ctors_end>
   2:	00 00       	nop
   4:	71 c0       	rjmp	.+226    	; 0xe8 <__bad_interrupt>
   6:	00 00       	nop
   8:	6f c0       	rjmp	.+222    	; 0xe8 <__bad_interrupt>
   a:	00 00       	nop
   c:	6d c0       	rjmp	.+218    	; 0xe8 <__bad_interrupt>
   e:	00 00       	nop
  10:	6b c0       	rjmp	.+214    	; 0xe8 <__bad_interrupt>
  12:	00 00       	nop
  14:	69 c0       	rjmp	.+210    	; 0xe8 <__bad_interrupt>
  16:	00 00       	nop
  18:	67 c0       	rjmp	.+206    	; 0xe8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	65 c0       	rjmp	.+202    	; 0xe8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	63 c0       	rjmp	.+198    	; 0xe8 <__bad_interrupt>
  22:	00 00       	nop
  24:	61 c0       	rjmp	.+194    	; 0xe8 <__bad_interrupt>
  26:	00 00       	nop
  28:	5f c0       	rjmp	.+190    	; 0xe8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5d c0       	rjmp	.+186    	; 0xe8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	5b c0       	rjmp	.+182    	; 0xe8 <__bad_interrupt>
  32:	00 00       	nop
  34:	99 c0       	rjmp	.+306    	; 0x168 <__vector_13>
  36:	00 00       	nop
  38:	57 c0       	rjmp	.+174    	; 0xe8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	55 c0       	rjmp	.+170    	; 0xe8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	53 c0       	rjmp	.+166    	; 0xe8 <__bad_interrupt>
  42:	00 00       	nop
  44:	51 c0       	rjmp	.+162    	; 0xe8 <__bad_interrupt>
  46:	00 00       	nop
  48:	4f c0       	rjmp	.+158    	; 0xe8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4d c0       	rjmp	.+154    	; 0xe8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	4b c0       	rjmp	.+150    	; 0xe8 <__bad_interrupt>
  52:	00 00       	nop
  54:	49 c0       	rjmp	.+146    	; 0xe8 <__bad_interrupt>
  56:	00 00       	nop
  58:	47 c0       	rjmp	.+142    	; 0xe8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	45 c0       	rjmp	.+138    	; 0xe8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	43 c0       	rjmp	.+134    	; 0xe8 <__bad_interrupt>
  62:	00 00       	nop
  64:	41 c0       	rjmp	.+130    	; 0xe8 <__bad_interrupt>
  66:	00 00       	nop
  68:	3f c0       	rjmp	.+126    	; 0xe8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3d c0       	rjmp	.+122    	; 0xe8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	3b c0       	rjmp	.+118    	; 0xe8 <__bad_interrupt>
  72:	00 00       	nop
  74:	39 c0       	rjmp	.+114    	; 0xe8 <__bad_interrupt>
  76:	00 00       	nop
  78:	37 c0       	rjmp	.+110    	; 0xe8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	35 c0       	rjmp	.+106    	; 0xe8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	33 c0       	rjmp	.+102    	; 0xe8 <__bad_interrupt>
  82:	00 00       	nop
  84:	31 c0       	rjmp	.+98     	; 0xe8 <__bad_interrupt>
  86:	00 00       	nop
  88:	2f c0       	rjmp	.+94     	; 0xe8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	7a 04       	cpc	r7, r10
  8e:	7e 04       	cpc	r7, r14
  90:	89 04       	cpc	r8, r9
  92:	94 04       	cpc	r9, r4
  94:	9f 04       	cpc	r9, r15
  96:	aa 04       	cpc	r10, r10
  98:	b5 04       	cpc	r11, r5
  9a:	c0 04       	cpc	r12, r0
  9c:	cb 04       	cpc	r12, r11
  9e:	e0 04       	cpc	r14, r0
  a0:	e2 04       	cpc	r14, r2
  a2:	e4 04       	cpc	r14, r4
  a4:	e6 04       	cpc	r14, r6
  a6:	e8 04       	cpc	r14, r8
  a8:	ea 04       	cpc	r14, r10
  aa:	ec 04       	cpc	r14, r12
  ac:	ee 04       	cpc	r14, r14

000000ae <__ctors_end>:
  ae:	11 24       	eor	r1, r1
  b0:	1f be       	out	0x3f, r1	; 63
  b2:	cf ef       	ldi	r28, 0xFF	; 255
  b4:	d0 e4       	ldi	r29, 0x40	; 64
  b6:	de bf       	out	0x3e, r29	; 62
  b8:	cd bf       	out	0x3d, r28	; 61

000000ba <__do_copy_data>:
  ba:	11 e0       	ldi	r17, 0x01	; 1
  bc:	a0 e0       	ldi	r26, 0x00	; 0
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	e0 ec       	ldi	r30, 0xC0	; 192
  c2:	fb e0       	ldi	r31, 0x0B	; 11
  c4:	00 e0       	ldi	r16, 0x00	; 0
  c6:	0b bf       	out	0x3b, r16	; 59
  c8:	02 c0       	rjmp	.+4      	; 0xce <__do_copy_data+0x14>
  ca:	07 90       	elpm	r0, Z+
  cc:	0d 92       	st	X+, r0
  ce:	aa 30       	cpi	r26, 0x0A	; 10
  d0:	b1 07       	cpc	r27, r17
  d2:	d9 f7       	brne	.-10     	; 0xca <__do_copy_data+0x10>

000000d4 <__do_clear_bss>:
  d4:	21 e0       	ldi	r18, 0x01	; 1
  d6:	aa e0       	ldi	r26, 0x0A	; 10
  d8:	b1 e0       	ldi	r27, 0x01	; 1
  da:	01 c0       	rjmp	.+2      	; 0xde <.do_clear_bss_start>

000000dc <.do_clear_bss_loop>:
  dc:	1d 92       	st	X+, r1

000000de <.do_clear_bss_start>:
  de:	ad 31       	cpi	r26, 0x1D	; 29
  e0:	b2 07       	cpc	r27, r18
  e2:	e1 f7       	brne	.-8      	; 0xdc <.do_clear_bss_loop>
  e4:	86 d4       	rcall	.+2316   	; 0x9f2 <main>
  e6:	6a c5       	rjmp	.+2772   	; 0xbbc <_exit>

000000e8 <__bad_interrupt>:
  e8:	8b cf       	rjmp	.-234    	; 0x0 <__vectors>

000000ea <adc_init>:
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) { //x = unsigned char, k = position, b = HIGH/LOW
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
}
unsigned char GetBit(unsigned char x, unsigned char k) {
	return ((x & (0x01 << k)) != 0);
}
  ea:	80 e4       	ldi	r24, 0x40	; 64
  ec:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  f0:	87 e8       	ldi	r24, 0x87	; 135
  f2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  f6:	08 95       	ret

000000f8 <adc_read>:
  f8:	ec e7       	ldi	r30, 0x7C	; 124
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	90 81       	ld	r25, Z
  fe:	98 7f       	andi	r25, 0xF8	; 248
 100:	87 70       	andi	r24, 0x07	; 7
 102:	89 2b       	or	r24, r25
 104:	80 83       	st	Z, r24
 106:	ea e7       	ldi	r30, 0x7A	; 122
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	80 64       	ori	r24, 0x40	; 64
 10e:	80 83       	st	Z, r24
 110:	80 81       	ld	r24, Z
 112:	86 fd       	sbrc	r24, 6
 114:	fd cf       	rjmp	.-6      	; 0x110 <adc_read+0x18>
 116:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 11a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 11e:	08 95       	ret

00000120 <TimerOn>:
 120:	8b e0       	ldi	r24, 0x0B	; 11
 122:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 126:	8d e7       	ldi	r24, 0x7D	; 125
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 12e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 132:	82 e0       	ldi	r24, 0x02	; 2
 134:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 138:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 13c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 140:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_avr_timer_M>
 144:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_avr_timer_M+0x1>
 148:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_avr_timer_M+0x2>
 14c:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_avr_timer_M+0x3>
 150:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 154:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 158:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <__data_end+0x2>
 15c:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <__data_end+0x3>
 160:	8f b7       	in	r24, 0x3f	; 63
 162:	80 68       	ori	r24, 0x80	; 128
 164:	8f bf       	out	0x3f, r24	; 63
 166:	08 95       	ret

00000168 <__vector_13>:
 168:	1f 92       	push	r1
 16a:	0f 92       	push	r0
 16c:	0f b6       	in	r0, 0x3f	; 63
 16e:	0f 92       	push	r0
 170:	11 24       	eor	r1, r1
 172:	8f 93       	push	r24
 174:	9f 93       	push	r25
 176:	af 93       	push	r26
 178:	bf 93       	push	r27
 17a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 17e:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 182:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <__data_end+0x2>
 186:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <__data_end+0x3>
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	a1 09       	sbc	r26, r1
 18e:	b1 09       	sbc	r27, r1
 190:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 194:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 198:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <__data_end+0x2>
 19c:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <__data_end+0x3>
 1a0:	89 2b       	or	r24, r25
 1a2:	8a 2b       	or	r24, r26
 1a4:	8b 2b       	or	r24, r27
 1a6:	99 f4       	brne	.+38     	; 0x1ce <__vector_13+0x66>
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <TimerFlag>
 1ae:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_avr_timer_M>
 1b2:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_avr_timer_M+0x1>
 1b6:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_avr_timer_M+0x2>
 1ba:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_avr_timer_M+0x3>
 1be:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 1c2:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 1c6:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <__data_end+0x2>
 1ca:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <__data_end+0x3>
 1ce:	bf 91       	pop	r27
 1d0:	af 91       	pop	r26
 1d2:	9f 91       	pop	r25
 1d4:	8f 91       	pop	r24
 1d6:	0f 90       	pop	r0
 1d8:	0f be       	out	0x3f, r0	; 63
 1da:	0f 90       	pop	r0
 1dc:	1f 90       	pop	r1
 1de:	18 95       	reti

000001e0 <TimerSet>:
 1e0:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <_avr_timer_M>
 1e4:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <_avr_timer_M+0x1>
 1e8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_avr_timer_M+0x2>
 1ec:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_avr_timer_M+0x3>
 1f0:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <__data_end>
 1f4:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <__data_end+0x1>
 1f8:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end+0x2>
 1fc:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x3>
 200:	08 95       	ret

00000202 <turnEverythingOff>:


void turnEverythingOff() { //Turns all LEDs off
 202:	50 91 14 01 	lds	r21, 0x0114	; 0x800114 <column12>
 206:	40 91 13 01 	lds	r20, 0x0113	; 0x800113 <column34>
 20a:	20 e0       	ldi	r18, 0x00	; 0
 20c:	30 e0       	ldi	r19, 0x00	; 0
}


// Bit-access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) { //x = unsigned char, k = position, b = HIGH/LOW
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
 20e:	61 e0       	ldi	r22, 0x01	; 1
 210:	70 e0       	ldi	r23, 0x00	; 0
 212:	cb 01       	movw	r24, r22
 214:	02 2e       	mov	r0, r18
 216:	02 c0       	rjmp	.+4      	; 0x21c <turnEverythingOff+0x1a>
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	0a 94       	dec	r0
 21e:	e2 f7       	brpl	.-8      	; 0x218 <turnEverythingOff+0x16>
 220:	80 95       	com	r24
 222:	58 23       	and	r21, r24
 224:	48 23       	and	r20, r24
 226:	2f 5f       	subi	r18, 0xFF	; 255
 228:	3f 4f       	sbci	r19, 0xFF	; 255
	return ((x & (0x01 << k)) != 0);
}


void turnEverythingOff() { //Turns all LEDs off
	for(unsigned char i = 0; i < 8; i++) {
 22a:	28 30       	cpi	r18, 0x08	; 8
 22c:	31 05       	cpc	r19, r1
 22e:	89 f7       	brne	.-30     	; 0x212 <turnEverythingOff+0x10>
 230:	50 93 14 01 	sts	0x0114, r21	; 0x800114 <column12>
 234:	40 93 13 01 	sts	0x0113, r20	; 0x800113 <column34>
}


// Bit-access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) { //x = unsigned char, k = position, b = HIGH/LOW
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
 238:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <layer>
 23c:	80 7f       	andi	r24, 0xF0	; 240
 23e:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <layer>
 242:	08 95       	ret

00000244 <turnEverythingOn>:
	//layer = 0x00;
	//column12 = 0x00;
	//column34 = 0x00;
}

void turnEverythingOn() { //Turns all LEDs on
 244:	50 91 14 01 	lds	r21, 0x0114	; 0x800114 <column12>
 248:	40 91 13 01 	lds	r20, 0x0113	; 0x800113 <column34>
 24c:	20 e0       	ldi	r18, 0x00	; 0
 24e:	30 e0       	ldi	r19, 0x00	; 0
}


// Bit-access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) { //x = unsigned char, k = position, b = HIGH/LOW
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
 250:	61 e0       	ldi	r22, 0x01	; 1
 252:	70 e0       	ldi	r23, 0x00	; 0
 254:	cb 01       	movw	r24, r22
 256:	02 2e       	mov	r0, r18
 258:	02 c0       	rjmp	.+4      	; 0x25e <turnEverythingOn+0x1a>
 25a:	88 0f       	add	r24, r24
 25c:	99 1f       	adc	r25, r25
 25e:	0a 94       	dec	r0
 260:	e2 f7       	brpl	.-8      	; 0x25a <turnEverythingOn+0x16>
 262:	80 95       	com	r24
 264:	58 23       	and	r21, r24
 266:	48 23       	and	r20, r24
 268:	2f 5f       	subi	r18, 0xFF	; 255
 26a:	3f 4f       	sbci	r19, 0xFF	; 255
	//column12 = 0x00;
	//column34 = 0x00;
}

void turnEverythingOn() { //Turns all LEDs on
	for(unsigned char i = 0; i < 8; i++) {
 26c:	28 30       	cpi	r18, 0x08	; 8
 26e:	31 05       	cpc	r19, r1
 270:	89 f7       	brne	.-30     	; 0x254 <turnEverythingOn+0x10>
 272:	50 93 14 01 	sts	0x0114, r21	; 0x800114 <column12>
 276:	40 93 13 01 	sts	0x0113, r20	; 0x800113 <column34>
}


// Bit-access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) { //x = unsigned char, k = position, b = HIGH/LOW
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
 27a:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <layer>
 27e:	8f 60       	ori	r24, 0x0F	; 15
 280:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <layer>
 284:	08 95       	ret

00000286 <flickerOn>:
	//column34 = 0x00;
}

enum FLO_states{FLO_start, FLO_ON, FLO_OFF}FLO_state;
void flickerOn() { //WORKS
	switch (FLO_state) { //	TRANSITION
 286:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <FLO_state>
 28a:	81 30       	cpi	r24, 0x01	; 1
 28c:	41 f0       	breq	.+16     	; 0x29e <flickerOn+0x18>
 28e:	18 f0       	brcs	.+6      	; 0x296 <flickerOn+0x10>
 290:	82 30       	cpi	r24, 0x02	; 2
 292:	49 f0       	breq	.+18     	; 0x2a6 <flickerOn+0x20>
 294:	0c c0       	rjmp	.+24     	; 0x2ae <flickerOn+0x28>
		case FLO_start:
			FLO_state = FLO_ON;
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <FLO_state>
			break;
 29c:	10 c0       	rjmp	.+32     	; 0x2be <flickerOn+0x38>
		case FLO_ON:
			FLO_state = FLO_OFF;
 29e:	82 e0       	ldi	r24, 0x02	; 2
 2a0:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <FLO_state>
 2a4:	0e c0       	rjmp	.+28     	; 0x2c2 <flickerOn+0x3c>
			break;
		case FLO_OFF:
			FLO_state = FLO_ON;
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <FLO_state>
			break;
 2ac:	08 c0       	rjmp	.+16     	; 0x2be <flickerOn+0x38>
	}
	
	switch (FLO_state) { //ACTIONS
 2ae:	81 30       	cpi	r24, 0x01	; 1
 2b0:	31 f0       	breq	.+12     	; 0x2be <flickerOn+0x38>
 2b2:	18 f0       	brcs	.+6      	; 0x2ba <flickerOn+0x34>
 2b4:	82 30       	cpi	r24, 0x02	; 2
 2b6:	31 f4       	brne	.+12     	; 0x2c4 <flickerOn+0x3e>
 2b8:	04 c0       	rjmp	.+8      	; 0x2c2 <flickerOn+0x3c>
		case FLO_start:
			turnEverythingOff();
 2ba:	a3 cf       	rjmp	.-186    	; 0x202 <turnEverythingOff>
		break;
		case FLO_ON:
			turnEverythingOn();
 2bc:	08 95       	ret
		break;
 2be:	c2 cf       	rjmp	.-124    	; 0x244 <turnEverythingOn>
		case FLO_OFF:
			turnEverythingOff();
 2c0:	08 95       	ret
 2c2:	9f cf       	rjmp	.-194    	; 0x202 <turnEverythingOff>
 2c4:	08 95       	ret

000002c6 <layerCascade>:


enum LC_states{LC_start, LC_layer1, LC_layer2, LC_layer3, LC_layer4}LC_state;
void layerCascade() {
	
	switch (LC_state) { //transitions
 2c6:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <LC_state>
 2ca:	82 30       	cpi	r24, 0x02	; 2
 2cc:	11 f1       	breq	.+68     	; 0x312 <layerCascade+0x4c>
 2ce:	28 f4       	brcc	.+10     	; 0x2da <layerCascade+0x14>
 2d0:	88 23       	and	r24, r24
 2d2:	41 f0       	breq	.+16     	; 0x2e4 <layerCascade+0x1e>
 2d4:	81 30       	cpi	r24, 0x01	; 1
 2d6:	69 f0       	breq	.+26     	; 0x2f2 <layerCascade+0x2c>
 2d8:	4c c0       	rjmp	.+152    	; 0x372 <layerCascade+0xac>
 2da:	83 30       	cpi	r24, 0x03	; 3
 2dc:	51 f1       	breq	.+84     	; 0x332 <layerCascade+0x6c>
 2de:	84 30       	cpi	r24, 0x04	; 4
 2e0:	c1 f1       	breq	.+112    	; 0x352 <layerCascade+0x8c>
 2e2:	47 c0       	rjmp	.+142    	; 0x372 <layerCascade+0xac>
		
		case LC_start: 
			count = 0;
 2e4:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <count>
			turnEverythingOff();
 2e8:	8c df       	rcall	.-232    	; 0x202 <turnEverythingOff>
			LC_state = LC_layer1;
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <LC_state>
			break;
 2f0:	4b c0       	rjmp	.+150    	; 0x388 <layerCascade+0xc2>
		case LC_layer1:
			if (count == timing) {
 2f2:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <count>
 2f6:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <timing>
 2fa:	89 13       	cpse	r24, r25
 2fc:	06 c0       	rjmp	.+12     	; 0x30a <layerCascade+0x44>
				LC_state = LC_layer2;
 2fe:	82 e0       	ldi	r24, 0x02	; 2
 300:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <LC_state>
				count = 0;
 304:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <count>
 308:	46 c0       	rjmp	.+140    	; 0x396 <layerCascade+0xd0>
			}
			else {
				LC_state = LC_layer1;
				count++;
 30a:	8f 5f       	subi	r24, 0xFF	; 255
 30c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <count>
 310:	3b c0       	rjmp	.+118    	; 0x388 <layerCascade+0xc2>
			}
			break;
		case LC_layer2:
			if (count == timing) {
 312:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <count>
 316:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <timing>
 31a:	89 13       	cpse	r24, r25
 31c:	06 c0       	rjmp	.+12     	; 0x32a <layerCascade+0x64>
				LC_state = LC_layer3;
 31e:	83 e0       	ldi	r24, 0x03	; 3
 320:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <LC_state>
				count = 0;
 324:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <count>
 328:	3d c0       	rjmp	.+122    	; 0x3a4 <layerCascade+0xde>
			}
			else {
				LC_state = LC_layer2;
				count++;
 32a:	8f 5f       	subi	r24, 0xFF	; 255
 32c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <count>
 330:	32 c0       	rjmp	.+100    	; 0x396 <layerCascade+0xd0>
			}
			break;
		case LC_layer3:
			if (count == timing) {
 332:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <count>
 336:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <timing>
 33a:	89 13       	cpse	r24, r25
 33c:	06 c0       	rjmp	.+12     	; 0x34a <layerCascade+0x84>
				LC_state = LC_layer4;
 33e:	84 e0       	ldi	r24, 0x04	; 4
 340:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <LC_state>
				count = 0;
 344:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <count>
 348:	34 c0       	rjmp	.+104    	; 0x3b2 <layerCascade+0xec>
			}
			else {
				LC_state = LC_layer3;
				count++;
 34a:	8f 5f       	subi	r24, 0xFF	; 255
 34c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <count>
 350:	29 c0       	rjmp	.+82     	; 0x3a4 <layerCascade+0xde>
			}
			break;
		case LC_layer4:
			if (count == timing) {
 352:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <count>
 356:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <timing>
 35a:	89 13       	cpse	r24, r25
 35c:	06 c0       	rjmp	.+12     	; 0x36a <layerCascade+0xa4>
				LC_state = LC_layer1;
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <LC_state>
				count = 0;
 364:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <count>
 368:	0f c0       	rjmp	.+30     	; 0x388 <layerCascade+0xc2>
			}
			else {
				LC_state = LC_layer4;
				count++;
 36a:	8f 5f       	subi	r24, 0xFF	; 255
 36c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <count>
 370:	20 c0       	rjmp	.+64     	; 0x3b2 <layerCascade+0xec>
			}
			break;
	}
	switch (LC_state) { //ACTIONS
 372:	82 30       	cpi	r24, 0x02	; 2
 374:	81 f0       	breq	.+32     	; 0x396 <layerCascade+0xd0>
 376:	18 f4       	brcc	.+6      	; 0x37e <layerCascade+0xb8>
 378:	81 30       	cpi	r24, 0x01	; 1
 37a:	09 f5       	brne	.+66     	; 0x3be <layerCascade+0xf8>
 37c:	05 c0       	rjmp	.+10     	; 0x388 <layerCascade+0xc2>
 37e:	83 30       	cpi	r24, 0x03	; 3
 380:	89 f0       	breq	.+34     	; 0x3a4 <layerCascade+0xde>
 382:	84 30       	cpi	r24, 0x04	; 4
 384:	e1 f4       	brne	.+56     	; 0x3be <layerCascade+0xf8>
 386:	15 c0       	rjmp	.+42     	; 0x3b2 <layerCascade+0xec>
		case LC_layer1:
			layer = SetBit(layer, 3, 0);
			//layer = layer & 0x07;
			layer = SetBit(layer, 0, 1);
 388:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <layer>
 38c:	87 7f       	andi	r24, 0xF7	; 247
 38e:	81 60       	ori	r24, 0x01	; 1
 390:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <layer>
			//layer = layer | 0x01;
			break;
 394:	08 95       	ret
		case LC_layer2:
			layer = SetBit(layer, 0 , 0);
			//layer = layer & 0x0E;
			layer = SetBit(layer, 1, 1);
 396:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <layer>
 39a:	8e 7f       	andi	r24, 0xFE	; 254
 39c:	82 60       	ori	r24, 0x02	; 2
 39e:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <layer>
			//layer = layer | 0x02;
			break;
 3a2:	08 95       	ret
		case LC_layer3:
			layer = SetBit(layer, 1 , 0);
			//layer = layer & 0x0D;
			layer = SetBit(layer, 2, 1);
 3a4:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <layer>
 3a8:	8d 7f       	andi	r24, 0xFD	; 253
 3aa:	84 60       	ori	r24, 0x04	; 4
 3ac:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <layer>
			//layer = layer | 0x04;
			break;
 3b0:	08 95       	ret
		case LC_layer4:
			layer = SetBit(layer, 2 , 0);
			//layer = layer & 0x0B;
			layer = SetBit(layer, 3, 1);
 3b2:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <layer>
 3b6:	8b 7f       	andi	r24, 0xFB	; 251
 3b8:	88 60       	ori	r24, 0x08	; 8
 3ba:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <layer>
 3be:	08 95       	ret

000003c0 <columnCascade>:
}

enum CC_states{CC_start, CC_column1, CC_column2, CC_column3, CC_column4}CC_state;
void columnCascade() {
	
	switch (CC_state) { //TRANSITIONS
 3c0:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <CC_state>
 3c4:	82 30       	cpi	r24, 0x02	; 2
 3c6:	11 f1       	breq	.+68     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3c8:	28 f4       	brcc	.+10     	; 0x3d4 <columnCascade+0x14>
 3ca:	88 23       	and	r24, r24
 3cc:	41 f0       	breq	.+16     	; 0x3de <columnCascade+0x1e>
 3ce:	81 30       	cpi	r24, 0x01	; 1
 3d0:	69 f0       	breq	.+26     	; 0x3ec <columnCascade+0x2c>
 3d2:	4c c0       	rjmp	.+152    	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 3d4:	83 30       	cpi	r24, 0x03	; 3
 3d6:	51 f1       	breq	.+84     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 3d8:	84 30       	cpi	r24, 0x04	; 4
 3da:	c1 f1       	breq	.+112    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 3dc:	47 c0       	rjmp	.+142    	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
		case CC_start:
			turnEverythingOn();
 3de:	32 df       	rcall	.-412    	; 0x244 <turnEverythingOn>
			count = 0;
 3e0:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <count>
			CC_state = CC_column1;
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <CC_state>
			break;
 3ea:	4b c0       	rjmp	.+150    	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
		case (CC_column1):
			if (count == timing) {
 3ec:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <count>
 3f0:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <timing>
 3f4:	89 13       	cpse	r24, r25
 3f6:	06 c0       	rjmp	.+12     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
				CC_state = CC_column2;
 3f8:	82 e0       	ldi	r24, 0x02	; 2
 3fa:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <CC_state>
				count = 0;
 3fe:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <count>
 402:	46 c0       	rjmp	.+140    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
			}
			else {
				CC_state = CC_column1;
				count++;
 404:	8f 5f       	subi	r24, 0xFF	; 255
 406:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <count>
 40a:	3b c0       	rjmp	.+118    	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
			}
			break;
		case (CC_column2):
			if (count == timing) {
 40c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <count>
 410:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <timing>
 414:	89 13       	cpse	r24, r25
 416:	06 c0       	rjmp	.+12     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
				CC_state = CC_column3;
 418:	83 e0       	ldi	r24, 0x03	; 3
 41a:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <CC_state>
				count = 0;
 41e:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <count>
 422:	3d c0       	rjmp	.+122    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
			}
			else {
				CC_state = CC_column2;
				count++;
 424:	8f 5f       	subi	r24, 0xFF	; 255
 426:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <count>
 42a:	32 c0       	rjmp	.+100    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
			}
			break;
		case (CC_column3):
			if (count == timing) {
 42c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <count>
 430:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <timing>
 434:	89 13       	cpse	r24, r25
 436:	06 c0       	rjmp	.+12     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
				CC_state = CC_column4;
 438:	84 e0       	ldi	r24, 0x04	; 4
 43a:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <CC_state>
				count = 0;
 43e:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <count>
 442:	34 c0       	rjmp	.+104    	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
			}
			else {
				CC_state = CC_column3;
				count++;
 444:	8f 5f       	subi	r24, 0xFF	; 255
 446:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <count>
 44a:	29 c0       	rjmp	.+82     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
			}
			break;
		case (CC_column4):
			if (count == timing) {
 44c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <count>
 450:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <timing>
 454:	89 13       	cpse	r24, r25
 456:	06 c0       	rjmp	.+12     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
				CC_state = CC_column1;
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <CC_state>
				count = 0;
 45e:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <count>
 462:	0f c0       	rjmp	.+30     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
			}
			else {
				CC_state = CC_column4;
				count++;
 464:	8f 5f       	subi	r24, 0xFF	; 255
 466:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <count>
 46a:	20 c0       	rjmp	.+64     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
			}
		break;
	}
	switch (CC_state) { //ACTION
 46c:	82 30       	cpi	r24, 0x02	; 2
 46e:	81 f0       	breq	.+32     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 470:	18 f4       	brcc	.+6      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 472:	81 30       	cpi	r24, 0x01	; 1
 474:	09 f5       	brne	.+66     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 476:	05 c0       	rjmp	.+10     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 478:	83 30       	cpi	r24, 0x03	; 3
 47a:	89 f0       	breq	.+34     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 47c:	84 30       	cpi	r24, 0x04	; 4
 47e:	e1 f4       	brne	.+56     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 480:	15 c0       	rjmp	.+42     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
		case CC_column1:
			column12 = 0xF0;
 482:	80 ef       	ldi	r24, 0xF0	; 240
 484:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <column12>
			column34 = 0xFF;
 488:	8f ef       	ldi	r24, 0xFF	; 255
 48a:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <column34>
			break;
 48e:	08 95       	ret
		case CC_column2:
			column12 = 0x0F;
 490:	8f e0       	ldi	r24, 0x0F	; 15
 492:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <column12>
			column34 = 0xFF;
 496:	8f ef       	ldi	r24, 0xFF	; 255
 498:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <column34>
			break;
 49c:	08 95       	ret
		case CC_column3:
			column34 = 0xF0;
 49e:	80 ef       	ldi	r24, 0xF0	; 240
 4a0:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <column34>
			column12 = 0xFF;
 4a4:	8f ef       	ldi	r24, 0xFF	; 255
 4a6:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <column12>
			break;
 4aa:	08 95       	ret
		case CC_column4:
			column34 = 0x0F;
 4ac:	8f e0       	ldi	r24, 0x0F	; 15
 4ae:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <column34>
			column12 = 0xFF;
 4b2:	8f ef       	ldi	r24, 0xFF	; 255
 4b4:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <column12>
 4b8:	08 95       	ret

000004ba <layerExtend>:
	}
}

enum LE_states{LE_start, LE_state1, LE_state2, LE_state3, LE_state4}LE_state;
void layerExtend() { //works
	switch (LE_state) { //TRANSITIONS
 4ba:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <LE_state>
 4be:	82 30       	cpi	r24, 0x02	; 2
 4c0:	11 f1       	breq	.+68     	; 0x506 <layerExtend+0x4c>
 4c2:	28 f4       	brcc	.+10     	; 0x4ce <layerExtend+0x14>
 4c4:	88 23       	and	r24, r24
 4c6:	41 f0       	breq	.+16     	; 0x4d8 <layerExtend+0x1e>
 4c8:	81 30       	cpi	r24, 0x01	; 1
 4ca:	69 f0       	breq	.+26     	; 0x4e6 <layerExtend+0x2c>
 4cc:	4e c0       	rjmp	.+156    	; 0x56a <layerExtend+0xb0>
 4ce:	83 30       	cpi	r24, 0x03	; 3
 4d0:	51 f1       	breq	.+84     	; 0x526 <layerExtend+0x6c>
 4d2:	84 30       	cpi	r24, 0x04	; 4
 4d4:	c1 f1       	breq	.+112    	; 0x546 <layerExtend+0x8c>
 4d6:	49 c0       	rjmp	.+146    	; 0x56a <layerExtend+0xb0>
		case LE_start:
			turnEverythingOff();
 4d8:	94 de       	rcall	.-728    	; 0x202 <turnEverythingOff>
			count = 0;
 4da:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <count>
			LE_state = LE_state1;
 4de:	81 e0       	ldi	r24, 0x01	; 1
 4e0:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <LE_state>
			break;
 4e4:	4d c0       	rjmp	.+154    	; 0x580 <layerExtend+0xc6>
		case LE_state1:
			if (count == timing) {
 4e6:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <count>
 4ea:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <timing>
 4ee:	89 13       	cpse	r24, r25
 4f0:	06 c0       	rjmp	.+12     	; 0x4fe <layerExtend+0x44>
				LE_state = LE_state2;
 4f2:	82 e0       	ldi	r24, 0x02	; 2
 4f4:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <LE_state>
				count = 0;
 4f8:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <count>
 4fc:	47 c0       	rjmp	.+142    	; 0x58c <layerExtend+0xd2>
			}
			else {
				LE_state = LE_state1;
				count++;
 4fe:	8f 5f       	subi	r24, 0xFF	; 255
 500:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <count>
 504:	3d c0       	rjmp	.+122    	; 0x580 <layerExtend+0xc6>
			}
			break;
		case LE_state2:
			if (count == timing) {
 506:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <count>
 50a:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <timing>
 50e:	89 13       	cpse	r24, r25
 510:	06 c0       	rjmp	.+12     	; 0x51e <layerExtend+0x64>
				LE_state = LE_state3;
 512:	83 e0       	ldi	r24, 0x03	; 3
 514:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <LE_state>
				count = 0;
 518:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <count>
 51c:	3d c0       	rjmp	.+122    	; 0x598 <layerExtend+0xde>
			}
			else {
				LE_state = LE_state2;
				count++;
 51e:	8f 5f       	subi	r24, 0xFF	; 255
 520:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <count>
 524:	33 c0       	rjmp	.+102    	; 0x58c <layerExtend+0xd2>
			}
			break;
		case LE_state3:
			if (count == timing) {
 526:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <count>
 52a:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <timing>
 52e:	89 13       	cpse	r24, r25
 530:	06 c0       	rjmp	.+12     	; 0x53e <layerExtend+0x84>
				LE_state = LE_state4;
 532:	84 e0       	ldi	r24, 0x04	; 4
 534:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <LE_state>
				count = 0;
 538:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <count>
 53c:	33 c0       	rjmp	.+102    	; 0x5a4 <layerExtend+0xea>
			}
			else {
				LE_state = LE_state3;
				count++;
 53e:	8f 5f       	subi	r24, 0xFF	; 255
 540:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <count>
 544:	29 c0       	rjmp	.+82     	; 0x598 <layerExtend+0xde>
			}
			break;
		case LE_state4:
			if (count == timing) {
 546:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <count>
 54a:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <timing>
 54e:	89 13       	cpse	r24, r25
 550:	08 c0       	rjmp	.+16     	; 0x562 <layerExtend+0xa8>
				layer = 0x00; //resets
 552:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <layer>
				LE_state = LE_state1;
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <LE_state>
				count = 0;
 55c:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <count>
 560:	0f c0       	rjmp	.+30     	; 0x580 <layerExtend+0xc6>
			}
			else {
				LE_state = LE_state4;
				count++;
 562:	8f 5f       	subi	r24, 0xFF	; 255
 564:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <count>
 568:	1d c0       	rjmp	.+58     	; 0x5a4 <layerExtend+0xea>
			}
		break;
	}
	switch (LE_state) { //ACTION
 56a:	82 30       	cpi	r24, 0x02	; 2
 56c:	79 f0       	breq	.+30     	; 0x58c <layerExtend+0xd2>
 56e:	18 f4       	brcc	.+6      	; 0x576 <layerExtend+0xbc>
 570:	81 30       	cpi	r24, 0x01	; 1
 572:	e9 f4       	brne	.+58     	; 0x5ae <layerExtend+0xf4>
 574:	05 c0       	rjmp	.+10     	; 0x580 <layerExtend+0xc6>
 576:	83 30       	cpi	r24, 0x03	; 3
 578:	79 f0       	breq	.+30     	; 0x598 <layerExtend+0xde>
 57a:	84 30       	cpi	r24, 0x04	; 4
 57c:	c1 f4       	brne	.+48     	; 0x5ae <layerExtend+0xf4>
 57e:	12 c0       	rjmp	.+36     	; 0x5a4 <layerExtend+0xea>
		case LE_state1:
			layer = SetBit(layer, 0, 1);
 580:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <layer>
 584:	81 60       	ori	r24, 0x01	; 1
 586:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <layer>
		break;
 58a:	08 95       	ret
		case LE_state2: 
			layer = SetBit(layer, 1, 1);
 58c:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <layer>
 590:	82 60       	ori	r24, 0x02	; 2
 592:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <layer>
		break;
 596:	08 95       	ret
		case LE_state3:
			layer = SetBit(layer, 2, 1);
 598:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <layer>
 59c:	84 60       	ori	r24, 0x04	; 4
 59e:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <layer>
		break;
 5a2:	08 95       	ret
		case LE_state4:
			layer = SetBit(layer, 3, 1);
 5a4:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <layer>
 5a8:	88 60       	ori	r24, 0x08	; 8
 5aa:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <layer>
 5ae:	08 95       	ret

000005b0 <randomFlicker>:

//void aroundEdgeDown() {
	//
//}
enum RF_states{RF_start, RF_lit, RF_reset}RF_state;
void randomFlicker() { //WORKS
 5b0:	cf 93       	push	r28
 5b2:	df 93       	push	r29
	unsigned char randomLayer;
	unsigned char randomColumnMacro;
	unsigned char randomColumn;
	switch (RF_state) { //TRANSISTIONS
 5b4:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <RF_state>
 5b8:	91 30       	cpi	r25, 0x01	; 1
 5ba:	41 f1       	breq	.+80     	; 0x60c <randomFlicker+0x5c>
 5bc:	18 f0       	brcs	.+6      	; 0x5c4 <randomFlicker+0x14>
 5be:	92 30       	cpi	r25, 0x02	; 2
 5c0:	b1 f1       	breq	.+108    	; 0x62e <randomFlicker+0x7e>
 5c2:	63 c0       	rjmp	.+198    	; 0x68a <randomFlicker+0xda>
		case RF_start:
			count = 0;
 5c4:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <count>
			turnEverythingOff();
 5c8:	1c de       	rcall	.-968    	; 0x202 <turnEverythingOff>
			randomLayer = rand() % 4;
 5ca:	8d d2       	rcall	.+1306   	; 0xae6 <rand>
 5cc:	83 70       	andi	r24, 0x03	; 3
 5ce:	90 78       	andi	r25, 0x80	; 128
 5d0:	99 23       	and	r25, r25
 5d2:	24 f4       	brge	.+8      	; 0x5dc <randomFlicker+0x2c>
 5d4:	01 97       	sbiw	r24, 0x01	; 1
 5d6:	8c 6f       	ori	r24, 0xFC	; 252
 5d8:	9f 6f       	ori	r25, 0xFF	; 255
 5da:	01 96       	adiw	r24, 0x01	; 1
 5dc:	d8 2f       	mov	r29, r24
			randomColumnMacro = rand() % 2;
 5de:	83 d2       	rcall	.+1286   	; 0xae6 <rand>
 5e0:	81 70       	andi	r24, 0x01	; 1
 5e2:	90 78       	andi	r25, 0x80	; 128
 5e4:	99 23       	and	r25, r25
 5e6:	24 f4       	brge	.+8      	; 0x5f0 <randomFlicker+0x40>
 5e8:	01 97       	sbiw	r24, 0x01	; 1
 5ea:	8e 6f       	ori	r24, 0xFE	; 254
 5ec:	9f 6f       	ori	r25, 0xFF	; 255
 5ee:	01 96       	adiw	r24, 0x01	; 1
 5f0:	c8 2f       	mov	r28, r24
			randomColumn = rand() % 8;
 5f2:	79 d2       	rcall	.+1266   	; 0xae6 <rand>
 5f4:	87 70       	andi	r24, 0x07	; 7
 5f6:	90 78       	andi	r25, 0x80	; 128
 5f8:	99 23       	and	r25, r25
 5fa:	24 f4       	brge	.+8      	; 0x604 <randomFlicker+0x54>
 5fc:	01 97       	sbiw	r24, 0x01	; 1
 5fe:	88 6f       	ori	r24, 0xF8	; 248
 600:	9f 6f       	ori	r25, 0xFF	; 255
 602:	01 96       	adiw	r24, 0x01	; 1
 604:	91 e0       	ldi	r25, 0x01	; 1
			RF_state = RF_lit;
 606:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <RF_state>
 60a:	44 c0       	rjmp	.+136    	; 0x694 <randomFlicker+0xe4>
		break;
 60c:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <count>
		case RF_lit:
			if (count == 2) {
 610:	92 30       	cpi	r25, 0x02	; 2
 612:	31 f4       	brne	.+12     	; 0x620 <randomFlicker+0x70>
 614:	82 e0       	ldi	r24, 0x02	; 2
				RF_state = RF_reset;
 616:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <RF_state>
 61a:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <count>
				count = 0;
 61e:	68 c0       	rjmp	.+208    	; 0x6f0 <randomFlicker+0x140>
 620:	9f 5f       	subi	r25, 0xFF	; 255
			}
			else {
				count++;
 622:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <count>
 626:	91 e0       	ldi	r25, 0x01	; 1
				RF_state = RF_lit;
 628:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <RF_state>
 62c:	33 c0       	rjmp	.+102    	; 0x694 <randomFlicker+0xe4>
 62e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <count>
			}
		break;
		case RF_reset:
			if (count == 2) {
 632:	82 30       	cpi	r24, 0x02	; 2
 634:	19 f5       	brne	.+70     	; 0x67c <randomFlicker+0xcc>
				randomLayer = rand() % 4;
 636:	57 d2       	rcall	.+1198   	; 0xae6 <rand>
 638:	83 70       	andi	r24, 0x03	; 3
 63a:	90 78       	andi	r25, 0x80	; 128
 63c:	99 23       	and	r25, r25
 63e:	24 f4       	brge	.+8      	; 0x648 <randomFlicker+0x98>
 640:	01 97       	sbiw	r24, 0x01	; 1
 642:	8c 6f       	ori	r24, 0xFC	; 252
 644:	9f 6f       	ori	r25, 0xFF	; 255
 646:	01 96       	adiw	r24, 0x01	; 1
 648:	d8 2f       	mov	r29, r24
				randomColumnMacro = rand() % 2;
 64a:	4d d2       	rcall	.+1178   	; 0xae6 <rand>
 64c:	81 70       	andi	r24, 0x01	; 1
 64e:	90 78       	andi	r25, 0x80	; 128
 650:	99 23       	and	r25, r25
 652:	24 f4       	brge	.+8      	; 0x65c <randomFlicker+0xac>
 654:	01 97       	sbiw	r24, 0x01	; 1
 656:	8e 6f       	ori	r24, 0xFE	; 254
 658:	9f 6f       	ori	r25, 0xFF	; 255
 65a:	01 96       	adiw	r24, 0x01	; 1
 65c:	c8 2f       	mov	r28, r24
				randomColumn = rand() % 8;
 65e:	43 d2       	rcall	.+1158   	; 0xae6 <rand>
 660:	87 70       	andi	r24, 0x07	; 7
 662:	90 78       	andi	r25, 0x80	; 128
 664:	99 23       	and	r25, r25
 666:	24 f4       	brge	.+8      	; 0x670 <randomFlicker+0xc0>
 668:	01 97       	sbiw	r24, 0x01	; 1
 66a:	88 6f       	ori	r24, 0xF8	; 248
 66c:	9f 6f       	ori	r25, 0xFF	; 255
 66e:	01 96       	adiw	r24, 0x01	; 1
 670:	91 e0       	ldi	r25, 0x01	; 1
				RF_state = RF_lit;
 672:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <RF_state>
 676:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <count>
				count = 0;
 67a:	0c c0       	rjmp	.+24     	; 0x694 <randomFlicker+0xe4>
 67c:	8f 5f       	subi	r24, 0xFF	; 255
			}
			else {
				count++;
 67e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <count>
 682:	82 e0       	ldi	r24, 0x02	; 2
				RF_state = RF_reset;
 684:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <RF_state>
 688:	33 c0       	rjmp	.+102    	; 0x6f0 <randomFlicker+0x140>
 68a:	91 30       	cpi	r25, 0x01	; 1
			}
		break;
	}
	switch (RF_state) { //ACTIONS
 68c:	19 f0       	breq	.+6      	; 0x694 <randomFlicker+0xe4>
 68e:	92 30       	cpi	r25, 0x02	; 2
 690:	81 f5       	brne	.+96     	; 0x6f2 <randomFlicker+0x142>
 692:	2e c0       	rjmp	.+92     	; 0x6f0 <randomFlicker+0x140>
 694:	21 e0       	ldi	r18, 0x01	; 1
		case RF_lit:
			layer = SetBit(layer, randomLayer, 1);
 696:	30 e0       	ldi	r19, 0x00	; 0
 698:	02 c0       	rjmp	.+4      	; 0x69e <randomFlicker+0xee>
 69a:	22 0f       	add	r18, r18
 69c:	33 1f       	adc	r19, r19
 69e:	da 95       	dec	r29
 6a0:	e2 f7       	brpl	.-8      	; 0x69a <randomFlicker+0xea>
 6a2:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <layer>
 6a6:	29 2b       	or	r18, r25
 6a8:	20 93 15 01 	sts	0x0115, r18	; 0x800115 <layer>
 6ac:	c1 11       	cpse	r28, r1
			if (randomColumnMacro == 0)
 6ae:	0f c0       	rjmp	.+30     	; 0x6ce <randomFlicker+0x11e>
 6b0:	21 e0       	ldi	r18, 0x01	; 1
				column12 = SetBit(column12, randomColumn, 1);
 6b2:	30 e0       	ldi	r19, 0x00	; 0
 6b4:	a9 01       	movw	r20, r18
 6b6:	02 c0       	rjmp	.+4      	; 0x6bc <randomFlicker+0x10c>
 6b8:	44 0f       	add	r20, r20
 6ba:	55 1f       	adc	r21, r21
 6bc:	8a 95       	dec	r24
 6be:	e2 f7       	brpl	.-8      	; 0x6b8 <randomFlicker+0x108>
 6c0:	ca 01       	movw	r24, r20
 6c2:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <column12>
 6c6:	89 2b       	or	r24, r25
 6c8:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <column12>
 6cc:	12 c0       	rjmp	.+36     	; 0x6f2 <randomFlicker+0x142>
 6ce:	c1 30       	cpi	r28, 0x01	; 1
			else if (randomColumnMacro == 1)
 6d0:	81 f4       	brne	.+32     	; 0x6f2 <randomFlicker+0x142>
 6d2:	21 e0       	ldi	r18, 0x01	; 1
				column34 = SetBit(column34, randomColumn, 1);
 6d4:	30 e0       	ldi	r19, 0x00	; 0
 6d6:	a9 01       	movw	r20, r18
 6d8:	02 c0       	rjmp	.+4      	; 0x6de <randomFlicker+0x12e>
 6da:	44 0f       	add	r20, r20
 6dc:	55 1f       	adc	r21, r21
 6de:	8a 95       	dec	r24
 6e0:	e2 f7       	brpl	.-8      	; 0x6da <randomFlicker+0x12a>
 6e2:	ca 01       	movw	r24, r20
 6e4:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <column34>
 6e8:	89 2b       	or	r24, r25
 6ea:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <column34>
 6ee:	01 c0       	rjmp	.+2      	; 0x6f2 <randomFlicker+0x142>
		break;
		case RF_reset:
			turnEverythingOff();
 6f0:	88 dd       	rcall	.-1264   	; 0x202 <turnEverythingOff>
 6f2:	df 91       	pop	r29
		break;
	}
}
 6f4:	cf 91       	pop	r28
 6f6:	08 95       	ret

000006f8 <randomRain>:
 6f8:	cf 93       	push	r28
enum RR_states{RR_start, RR_1, RR_2, RR_3, RR_4, RR_5}RR_state;
void randomRain() {
	unsigned char randomLayer;
	unsigned char randomColumnMacro;
	unsigned char randomColumn;
	switch (RR_state) {
 6fa:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <RR_state>
 6fe:	92 30       	cpi	r25, 0x02	; 2
 700:	09 f4       	brne	.+2      	; 0x704 <randomRain+0xc>
 702:	3b c0       	rjmp	.+118    	; 0x77a <randomRain+0x82>
 704:	28 f4       	brcc	.+10     	; 0x710 <randomRain+0x18>
 706:	99 23       	and	r25, r25
 708:	61 f0       	breq	.+24     	; 0x722 <randomRain+0x2a>
 70a:	91 30       	cpi	r25, 0x01	; 1
 70c:	29 f1       	breq	.+74     	; 0x758 <randomRain+0x60>
 70e:	78 c0       	rjmp	.+240    	; 0x800 <randomRain+0x108>
 710:	94 30       	cpi	r25, 0x04	; 4
 712:	09 f4       	brne	.+2      	; 0x716 <randomRain+0x1e>
 714:	54 c0       	rjmp	.+168    	; 0x7be <randomRain+0xc6>
 716:	08 f4       	brcc	.+2      	; 0x71a <randomRain+0x22>
 718:	41 c0       	rjmp	.+130    	; 0x79c <randomRain+0xa4>
 71a:	95 30       	cpi	r25, 0x05	; 5
 71c:	09 f4       	brne	.+2      	; 0x720 <randomRain+0x28>
 71e:	60 c0       	rjmp	.+192    	; 0x7e0 <randomRain+0xe8>
 720:	6f c0       	rjmp	.+222    	; 0x800 <randomRain+0x108>
		case RR_start:
			count = 0;
 722:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <count>
			turnEverythingOff();
 726:	6d dd       	rcall	.-1318   	; 0x202 <turnEverythingOff>
			randomLayer = rand() % 4;
 728:	de d1       	rcall	.+956    	; 0xae6 <rand>
			randomColumnMacro = rand() % 2;
 72a:	dd d1       	rcall	.+954    	; 0xae6 <rand>
 72c:	81 70       	andi	r24, 0x01	; 1
 72e:	90 78       	andi	r25, 0x80	; 128
 730:	99 23       	and	r25, r25
 732:	24 f4       	brge	.+8      	; 0x73c <randomRain+0x44>
 734:	01 97       	sbiw	r24, 0x01	; 1
 736:	8e 6f       	ori	r24, 0xFE	; 254
 738:	9f 6f       	ori	r25, 0xFF	; 255
 73a:	01 96       	adiw	r24, 0x01	; 1
 73c:	c8 2f       	mov	r28, r24
			randomColumn = rand() % 8;
 73e:	d3 d1       	rcall	.+934    	; 0xae6 <rand>
 740:	87 70       	andi	r24, 0x07	; 7
 742:	90 78       	andi	r25, 0x80	; 128
 744:	99 23       	and	r25, r25
 746:	24 f4       	brge	.+8      	; 0x750 <randomRain+0x58>
 748:	01 97       	sbiw	r24, 0x01	; 1
 74a:	88 6f       	ori	r24, 0xF8	; 248
 74c:	9f 6f       	ori	r25, 0xFF	; 255
 74e:	01 96       	adiw	r24, 0x01	; 1
 750:	91 e0       	ldi	r25, 0x01	; 1
			RR_state = RR_1;
 752:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <RR_state>
 756:	63 c0       	rjmp	.+198    	; 0x81e <randomRain+0x126>
			break;
 758:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <count>
		case RR_1:
			if (count == 1) {
 75c:	91 30       	cpi	r25, 0x01	; 1
 75e:	31 f4       	brne	.+12     	; 0x76c <randomRain+0x74>
 760:	82 e0       	ldi	r24, 0x02	; 2
				RR_state = RR_2;
 762:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <RR_state>
 766:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <count>
				count = 0;
 76a:	82 c0       	rjmp	.+260    	; 0x870 <randomRain+0x178>
 76c:	9f 5f       	subi	r25, 0xFF	; 255
			}
			else {
				count++;
 76e:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <count>
 772:	91 e0       	ldi	r25, 0x01	; 1
				RF_state = RR_1;
 774:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <RF_state>
 778:	52 c0       	rjmp	.+164    	; 0x81e <randomRain+0x126>
 77a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <count>
			}
			break;
		case RR_2:
			if (count == 1) {
 77e:	81 30       	cpi	r24, 0x01	; 1
 780:	31 f4       	brne	.+12     	; 0x78e <randomRain+0x96>
 782:	83 e0       	ldi	r24, 0x03	; 3
				RR_state = RR_3;
 784:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <RR_state>
 788:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <count>
				count = 0;
 78c:	78 c0       	rjmp	.+240    	; 0x87e <randomRain+0x186>
 78e:	8f 5f       	subi	r24, 0xFF	; 255
			}
			else {
				count++;
 790:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <count>
 794:	82 e0       	ldi	r24, 0x02	; 2
				RF_state = RR_2;
 796:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <RF_state>
 79a:	6a c0       	rjmp	.+212    	; 0x870 <randomRain+0x178>
 79c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <count>
			}
		break;
		case RR_3:
			if (count == 1) {
 7a0:	81 30       	cpi	r24, 0x01	; 1
 7a2:	31 f4       	brne	.+12     	; 0x7b0 <randomRain+0xb8>
 7a4:	84 e0       	ldi	r24, 0x04	; 4
				RR_state = RR_4;
 7a6:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <RR_state>
 7aa:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <count>
				count = 0;
 7ae:	6e c0       	rjmp	.+220    	; 0x88c <randomRain+0x194>
 7b0:	8f 5f       	subi	r24, 0xFF	; 255
			}
			else {
				count++;
 7b2:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <count>
 7b6:	83 e0       	ldi	r24, 0x03	; 3
				RF_state = RR_3;
 7b8:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <RF_state>
 7bc:	60 c0       	rjmp	.+192    	; 0x87e <randomRain+0x186>
 7be:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <count>
			}
		break;
		case RR_4:
			if (count == 1) {
 7c2:	81 30       	cpi	r24, 0x01	; 1
 7c4:	31 f4       	brne	.+12     	; 0x7d2 <randomRain+0xda>
 7c6:	85 e0       	ldi	r24, 0x05	; 5
				RR_state = RR_5;
 7c8:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <RR_state>
 7cc:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <count>
				count = 0;
 7d0:	64 c0       	rjmp	.+200    	; 0x89a <randomRain+0x1a2>
 7d2:	8f 5f       	subi	r24, 0xFF	; 255
			}
			else {
				count++;
 7d4:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <count>
 7d8:	84 e0       	ldi	r24, 0x04	; 4
				RF_state = RR_4;
 7da:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <RF_state>
 7de:	56 c0       	rjmp	.+172    	; 0x88c <randomRain+0x194>
 7e0:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <count>
			}
		break;
		case RR_5:
			if (count == 1) {
 7e4:	81 30       	cpi	r24, 0x01	; 1
 7e6:	29 f4       	brne	.+10     	; 0x7f2 <randomRain+0xfa>
 7e8:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <RR_state>
				RR_state = RR_start;
 7ec:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <count>
				count = 0;
 7f0:	5e c0       	rjmp	.+188    	; 0x8ae <randomRain+0x1b6>
 7f2:	8f 5f       	subi	r24, 0xFF	; 255
			}
			else {
				count++;
 7f4:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <count>
 7f8:	85 e0       	ldi	r24, 0x05	; 5
				RF_state = RR_5;
 7fa:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <RF_state>
 7fe:	4d c0       	rjmp	.+154    	; 0x89a <randomRain+0x1a2>
 800:	93 30       	cpi	r25, 0x03	; 3
			}
		break;
	}
	switch(RR_state) {
 802:	e9 f1       	breq	.+122    	; 0x87e <randomRain+0x186>
 804:	30 f4       	brcc	.+12     	; 0x812 <randomRain+0x11a>
 806:	91 30       	cpi	r25, 0x01	; 1
 808:	51 f0       	breq	.+20     	; 0x81e <randomRain+0x126>
 80a:	92 30       	cpi	r25, 0x02	; 2
 80c:	09 f0       	breq	.+2      	; 0x810 <randomRain+0x118>
 80e:	4f c0       	rjmp	.+158    	; 0x8ae <randomRain+0x1b6>
 810:	2f c0       	rjmp	.+94     	; 0x870 <randomRain+0x178>
 812:	94 30       	cpi	r25, 0x04	; 4
 814:	d9 f1       	breq	.+118    	; 0x88c <randomRain+0x194>
 816:	95 30       	cpi	r25, 0x05	; 5
 818:	09 f0       	breq	.+2      	; 0x81c <randomRain+0x124>
 81a:	49 c0       	rjmp	.+146    	; 0x8ae <randomRain+0x1b6>
 81c:	3e c0       	rjmp	.+124    	; 0x89a <randomRain+0x1a2>
 81e:	c1 11       	cpse	r28, r1
		case RR_1:
			if (randomColumnMacro == 0) {
 820:	10 c0       	rjmp	.+32     	; 0x842 <randomRain+0x14a>
 822:	21 e0       	ldi	r18, 0x01	; 1
				column12 = SetBit(column12, randomColumn, 0);
 824:	30 e0       	ldi	r19, 0x00	; 0
 826:	a9 01       	movw	r20, r18
 828:	02 c0       	rjmp	.+4      	; 0x82e <randomRain+0x136>
 82a:	44 0f       	add	r20, r20
 82c:	55 1f       	adc	r21, r21
 82e:	8a 95       	dec	r24
 830:	e2 f7       	brpl	.-8      	; 0x82a <randomRain+0x132>
 832:	ca 01       	movw	r24, r20
 834:	80 95       	com	r24
 836:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <column12>
 83a:	89 23       	and	r24, r25
 83c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <column12>
 840:	11 c0       	rjmp	.+34     	; 0x864 <randomRain+0x16c>
 842:	c2 30       	cpi	r28, 0x02	; 2
			}
			else if (randomColumnMacro == 2) {
 844:	79 f4       	brne	.+30     	; 0x864 <randomRain+0x16c>
 846:	21 e0       	ldi	r18, 0x01	; 1
				column34 = SetBit(column34, randomColumn, 0);
 848:	30 e0       	ldi	r19, 0x00	; 0
 84a:	a9 01       	movw	r20, r18
 84c:	02 c0       	rjmp	.+4      	; 0x852 <randomRain+0x15a>
 84e:	44 0f       	add	r20, r20
 850:	55 1f       	adc	r21, r21
 852:	8a 95       	dec	r24
 854:	e2 f7       	brpl	.-8      	; 0x84e <randomRain+0x156>
 856:	ca 01       	movw	r24, r20
 858:	80 95       	com	r24
 85a:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <column34>
 85e:	89 23       	and	r24, r25
 860:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <column34>
 864:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <layer>
			}
			layer = SetBit(layer, 0, 1);
 868:	81 60       	ori	r24, 0x01	; 1
 86a:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <layer>
 86e:	1f c0       	rjmp	.+62     	; 0x8ae <randomRain+0x1b6>
			break;
 870:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <layer>
		case RR_2:
			layer = SetBit(layer, 0, 0);
			layer = SetBit(layer, 1, 1);
 874:	8e 7f       	andi	r24, 0xFE	; 254
 876:	82 60       	ori	r24, 0x02	; 2
 878:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <layer>
 87c:	18 c0       	rjmp	.+48     	; 0x8ae <randomRain+0x1b6>
			break;
 87e:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <layer>
		case RR_3:
			layer = SetBit(layer, 1, 0);
			layer = SetBit(layer, 2, 1);
 882:	8d 7f       	andi	r24, 0xFD	; 253
 884:	84 60       	ori	r24, 0x04	; 4
 886:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <layer>
 88a:	11 c0       	rjmp	.+34     	; 0x8ae <randomRain+0x1b6>
			break;
 88c:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <layer>
		case RR_4:
			layer = SetBit(layer, 2, 0);
			layer = SetBit(layer, 3, 1);
 890:	8b 7f       	andi	r24, 0xFB	; 251
 892:	88 60       	ori	r24, 0x08	; 8
 894:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <layer>
 898:	0a c0       	rjmp	.+20     	; 0x8ae <randomRain+0x1b6>
			break;
 89a:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <layer>
		case RR_5:
			layer = SetBit(layer, 3, 0);
 89e:	87 7f       	andi	r24, 0xF7	; 247
 8a0:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <layer>
 8a4:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <column12>
			if (randomColumnMacro == 0) {
				column12 = SetBit(column12, randomColumn, 1);
 8a8:	81 60       	ori	r24, 0x01	; 1
 8aa:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <column12>
 8ae:	cf 91       	pop	r28
			else if (randomColumnMacro == 2) {
				column34 = SetBit(column34, randomColumn, 1);
			}
			break;
	}
}
 8b0:	08 95       	ret

000008b2 <buttonToggle>:
 8b2:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <joyStick>


unsigned char buttonToggle() {
	if (joyStick > 700) {
 8b6:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <joyStick+0x1>
 8ba:	8d 3b       	cpi	r24, 0xBD	; 189
 8bc:	22 e0       	ldi	r18, 0x02	; 2
 8be:	92 07       	cpc	r25, r18
 8c0:	20 f0       	brcs	.+8      	; 0x8ca <buttonToggle+0x18>
		hold = 1;
 8c2:	81 e0       	ldi	r24, 0x01	; 1
 8c4:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <hold>
		return 1;
 8c8:	08 95       	ret
	}
	else if (joyStick <= 300 ) {
 8ca:	8d 32       	cpi	r24, 0x2D	; 45
 8cc:	91 40       	sbci	r25, 0x01	; 1
 8ce:	20 f4       	brcc	.+8      	; 0x8d8 <buttonToggle+0x26>
		hold = 0;
 8d0:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <hold>
		return 0;
 8d4:	80 e0       	ldi	r24, 0x00	; 0
 8d6:	08 95       	ret
	}
	return 0; //(!button && !hold)  and (button && hold)
 8d8:	80 e0       	ldi	r24, 0x00	; 0
}
 8da:	08 95       	ret

000008dc <tick>:

enum {start, OFF, ON, FO, LC, CC, LE, RF, RR}state;
void tick() {
	switch (state) { //transitions
 8dc:	e0 91 17 01 	lds	r30, 0x0117	; 0x800117 <state>
 8e0:	8e 2f       	mov	r24, r30
 8e2:	90 e0       	ldi	r25, 0x00	; 0
 8e4:	89 30       	cpi	r24, 0x09	; 9
 8e6:	91 05       	cpc	r25, r1
 8e8:	08 f0       	brcs	.+2      	; 0x8ec <tick+0x10>
 8ea:	60 c0       	rjmp	.+192    	; 0x9ac <tick+0xd0>
 8ec:	fc 01       	movw	r30, r24
 8ee:	ea 5b       	subi	r30, 0xBA	; 186
 8f0:	ff 4f       	sbci	r31, 0xFF	; 255
 8f2:	a9 c0       	rjmp	.+338    	; 0xa46 <__tablejump2__>
		case start:
			state = OFF;
 8f4:	81 e0       	ldi	r24, 0x01	; 1
 8f6:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <state>
			break;
		case OFF:
			if (buttonToggle()) {
 8fa:	62 c0       	rjmp	.+196    	; 0x9c0 <tick+0xe4>
 8fc:	da df       	rcall	.-76     	; 0x8b2 <buttonToggle>
 8fe:	88 23       	and	r24, r24
 900:	21 f0       	breq	.+8      	; 0x90a <tick+0x2e>
				state = ON;
 902:	82 e0       	ldi	r24, 0x02	; 2
 904:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <state>
 908:	5d c0       	rjmp	.+186    	; 0x9c4 <tick+0xe8>
			}
			else {
				state = OFF;
 90a:	81 e0       	ldi	r24, 0x01	; 1
 90c:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <state>
			}
			break;
		case ON:
			if (buttonToggle()) {
 910:	57 c0       	rjmp	.+174    	; 0x9c0 <tick+0xe4>
 912:	cf df       	rcall	.-98     	; 0x8b2 <buttonToggle>
 914:	88 23       	and	r24, r24
 916:	21 f0       	breq	.+8      	; 0x920 <tick+0x44>
				state = FO;
 918:	83 e0       	ldi	r24, 0x03	; 3
 91a:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <state>
 91e:	54 c0       	rjmp	.+168    	; 0x9c8 <tick+0xec>
			}
			else {
				state = ON;
 920:	82 e0       	ldi	r24, 0x02	; 2
 922:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <state>
			}
			break;
		case FO:
		if (buttonToggle()) {
 926:	4e c0       	rjmp	.+156    	; 0x9c4 <tick+0xe8>
 928:	c4 df       	rcall	.-120    	; 0x8b2 <buttonToggle>
 92a:	88 23       	and	r24, r24
 92c:	21 f0       	breq	.+8      	; 0x936 <tick+0x5a>
			state = LC;
 92e:	84 e0       	ldi	r24, 0x04	; 4
 930:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <state>
 934:	4b c0       	rjmp	.+150    	; 0x9cc <tick+0xf0>
		}
		else {
			state = FO;
 936:	83 e0       	ldi	r24, 0x03	; 3
 938:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <state>
		}
		break;
		case LC:
			if (buttonToggle()) {
 93c:	45 c0       	rjmp	.+138    	; 0x9c8 <tick+0xec>
 93e:	b9 df       	rcall	.-142    	; 0x8b2 <buttonToggle>
 940:	88 23       	and	r24, r24
 942:	21 f0       	breq	.+8      	; 0x94c <tick+0x70>
				state = CC;
 944:	85 e0       	ldi	r24, 0x05	; 5
 946:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <state>
			}
			else {
				state = LC;
 94a:	42 c0       	rjmp	.+132    	; 0x9d0 <tick+0xf4>
 94c:	84 e0       	ldi	r24, 0x04	; 4
 94e:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <state>
			}
		break;
		case CC:
			if (buttonToggle()) {
 952:	3c c0       	rjmp	.+120    	; 0x9cc <tick+0xf0>
 954:	ae df       	rcall	.-164    	; 0x8b2 <buttonToggle>
 956:	88 23       	and	r24, r24
 958:	21 f0       	breq	.+8      	; 0x962 <tick+0x86>
				state = LE;
 95a:	86 e0       	ldi	r24, 0x06	; 6
 95c:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <state>
			}
			else {
				state = CC;
 960:	39 c0       	rjmp	.+114    	; 0x9d4 <tick+0xf8>
 962:	85 e0       	ldi	r24, 0x05	; 5
 964:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <state>
		}
		break;
		case LE:
			if (buttonToggle()) {
 968:	33 c0       	rjmp	.+102    	; 0x9d0 <tick+0xf4>
 96a:	a3 df       	rcall	.-186    	; 0x8b2 <buttonToggle>
 96c:	88 23       	and	r24, r24
 96e:	21 f0       	breq	.+8      	; 0x978 <tick+0x9c>
				state = RF;
 970:	87 e0       	ldi	r24, 0x07	; 7
 972:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <state>
			}
			else {
				state = LE;
 976:	30 c0       	rjmp	.+96     	; 0x9d8 <tick+0xfc>
 978:	86 e0       	ldi	r24, 0x06	; 6
 97a:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <state>
			}
		break;
		case RF:
			if (buttonToggle()) {
 97e:	2a c0       	rjmp	.+84     	; 0x9d4 <tick+0xf8>
 980:	98 df       	rcall	.-208    	; 0x8b2 <buttonToggle>
 982:	88 23       	and	r24, r24
 984:	21 f0       	breq	.+8      	; 0x98e <tick+0xb2>
				state = RR;
 986:	88 e0       	ldi	r24, 0x08	; 8
 988:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <state>
			}
			else {
				state = RF;
 98c:	27 c0       	rjmp	.+78     	; 0x9dc <tick+0x100>
 98e:	87 e0       	ldi	r24, 0x07	; 7
 990:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <state>
			}
		break;
		case RR:
			if (buttonToggle()) {
 994:	21 c0       	rjmp	.+66     	; 0x9d8 <tick+0xfc>
 996:	8d df       	rcall	.-230    	; 0x8b2 <buttonToggle>
 998:	88 23       	and	r24, r24
 99a:	21 f0       	breq	.+8      	; 0x9a4 <tick+0xc8>
				state = OFF;
 99c:	81 e0       	ldi	r24, 0x01	; 1
 99e:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <state>
 9a2:	0e c0       	rjmp	.+28     	; 0x9c0 <tick+0xe4>
			}
			else {
				state = RR;
 9a4:	88 e0       	ldi	r24, 0x08	; 8
 9a6:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <state>
 9aa:	18 c0       	rjmp	.+48     	; 0x9dc <tick+0x100>
			}
			break;
	}
	switch (state) { //ACTIONS
 9ac:	8e 2f       	mov	r24, r30
 9ae:	90 e0       	ldi	r25, 0x00	; 0
 9b0:	fc 01       	movw	r30, r24
 9b2:	31 97       	sbiw	r30, 0x01	; 1
 9b4:	e8 30       	cpi	r30, 0x08	; 8
 9b6:	f1 05       	cpc	r31, r1
 9b8:	90 f4       	brcc	.+36     	; 0x9de <tick+0x102>
		case OFF:
			turnEverythingOff();
 9ba:	e1 5b       	subi	r30, 0xB1	; 177
			break;
		case ON:
			turnEverythingOn();
 9bc:	ff 4f       	sbci	r31, 0xFF	; 255
			break;
 9be:	43 c0       	rjmp	.+134    	; 0xa46 <__tablejump2__>
		case FO:
			flickerOn();
 9c0:	20 dc       	rcall	.-1984   	; 0x202 <turnEverythingOff>
 9c2:	0d c0       	rjmp	.+26     	; 0x9de <tick+0x102>
			break;
 9c4:	3f dc       	rcall	.-1922   	; 0x244 <turnEverythingOn>
		case LC:
			layerCascade();
 9c6:	0b c0       	rjmp	.+22     	; 0x9de <tick+0x102>
 9c8:	5e dc       	rcall	.-1860   	; 0x286 <flickerOn>
			break;
 9ca:	09 c0       	rjmp	.+18     	; 0x9de <tick+0x102>
		case CC:
			columnCascade();
 9cc:	7c dc       	rcall	.-1800   	; 0x2c6 <layerCascade>
 9ce:	07 c0       	rjmp	.+14     	; 0x9de <tick+0x102>
			break;
 9d0:	f7 dc       	rcall	.-1554   	; 0x3c0 <columnCascade>
		case LE:
			layerExtend();
 9d2:	05 c0       	rjmp	.+10     	; 0x9de <tick+0x102>
 9d4:	72 dd       	rcall	.-1308   	; 0x4ba <layerExtend>
			break;
 9d6:	03 c0       	rjmp	.+6      	; 0x9de <tick+0x102>
		case RF:
			randomFlicker();
 9d8:	eb dd       	rcall	.-1066   	; 0x5b0 <randomFlicker>
 9da:	01 c0       	rjmp	.+2      	; 0x9de <tick+0x102>
			break;
 9dc:	8d de       	rcall	.-742    	; 0x6f8 <randomRain>
		case RR:
			randomRain();
 9de:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <column12>
			break;
	}
	PORTB = column12;
 9e2:	85 b9       	out	0x05, r24	; 5
 9e4:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <layer>
	PORTC = layer;
 9e8:	88 b9       	out	0x08, r24	; 8
 9ea:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <column34>
	PORTD = column34;
 9ee:	8b b9       	out	0x0b, r24	; 11
 9f0:	08 95       	ret

000009f2 <main>:
 9f2:	7b db       	rcall	.-2314   	; 0xea <adc_init>
 9f4:	11 b8       	out	0x01, r1	; 1
}
int main(void) //LC, CC, LE, RF
{
	adc_init();
	DDRA = 0x00; PORTA = 0xFF; //Input
 9f6:	8f ef       	ldi	r24, 0xFF	; 255
 9f8:	82 b9       	out	0x02, r24	; 2
	DDRC = 0xFF; PORTC = 0x00; //Layer Output
 9fa:	87 b9       	out	0x07, r24	; 7
 9fc:	18 b8       	out	0x08, r1	; 8
	DDRB = 0xFF; PORTB = 0x00;
 9fe:	84 b9       	out	0x04, r24	; 4
 a00:	15 b8       	out	0x05, r1	; 5
	DDRD = 0xFF; PORTD = 0x00;
 a02:	8a b9       	out	0x0a, r24	; 10
 a04:	1b b8       	out	0x0b, r1	; 11
	
	
	FLO_state = FLO_start;
 a06:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <FLO_state>
	LC_state = LC_start;
 a0a:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <LC_state>
	CC_state = CC_start;
 a0e:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <CC_state>
	LE_state = LE_start;
 a12:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <LE_state>
	RF_state = RF_start;
 a16:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <RF_state>
	RR_state = RR_start;
 a1a:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <RR_state>
	
	TimerSet(100);
 a1e:	64 e6       	ldi	r22, 0x64	; 100
 a20:	70 e0       	ldi	r23, 0x00	; 0
 a22:	80 e0       	ldi	r24, 0x00	; 0
 a24:	90 e0       	ldi	r25, 0x00	; 0
	TimerOn();
 a26:	dc db       	rcall	.-2120   	; 0x1e0 <TimerSet>

    while (1) 
    {
		joyStick = adc_read(0);
 a28:	7b db       	rcall	.-2314   	; 0x120 <TimerOn>
 a2a:	80 e0       	ldi	r24, 0x00	; 0
 a2c:	65 db       	rcall	.-2358   	; 0xf8 <adc_read>
 a2e:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <joyStick+0x1>
 a32:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <joyStick>
		tick();
 a36:	52 df       	rcall	.-348    	; 0x8dc <tick>
		while(!TimerFlag);
 a38:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <TimerFlag>
 a3c:	88 23       	and	r24, r24
 a3e:	e1 f3       	breq	.-8      	; 0xa38 <main+0x46>
		TimerFlag = 0;
 a40:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <TimerFlag>
		
    }
 a44:	f2 cf       	rjmp	.-28     	; 0xa2a <main+0x38>

00000a46 <__tablejump2__>:
 a46:	ee 0f       	add	r30, r30
 a48:	ff 1f       	adc	r31, r31
 a4a:	00 24       	eor	r0, r0
 a4c:	00 1c       	adc	r0, r0
 a4e:	0b be       	out	0x3b, r0	; 59
 a50:	07 90       	elpm	r0, Z+
 a52:	f6 91       	elpm	r31, Z
 a54:	e0 2d       	mov	r30, r0
 a56:	09 94       	ijmp

00000a58 <do_rand>:
 a58:	8f 92       	push	r8
 a5a:	9f 92       	push	r9
 a5c:	af 92       	push	r10
 a5e:	bf 92       	push	r11
 a60:	cf 92       	push	r12
 a62:	df 92       	push	r13
 a64:	ef 92       	push	r14
 a66:	ff 92       	push	r15
 a68:	cf 93       	push	r28
 a6a:	df 93       	push	r29
 a6c:	ec 01       	movw	r28, r24
 a6e:	68 81       	ld	r22, Y
 a70:	79 81       	ldd	r23, Y+1	; 0x01
 a72:	8a 81       	ldd	r24, Y+2	; 0x02
 a74:	9b 81       	ldd	r25, Y+3	; 0x03
 a76:	61 15       	cp	r22, r1
 a78:	71 05       	cpc	r23, r1
 a7a:	81 05       	cpc	r24, r1
 a7c:	91 05       	cpc	r25, r1
 a7e:	21 f4       	brne	.+8      	; 0xa88 <do_rand+0x30>
 a80:	64 e2       	ldi	r22, 0x24	; 36
 a82:	79 ed       	ldi	r23, 0xD9	; 217
 a84:	8b e5       	ldi	r24, 0x5B	; 91
 a86:	97 e0       	ldi	r25, 0x07	; 7
 a88:	2d e1       	ldi	r18, 0x1D	; 29
 a8a:	33 ef       	ldi	r19, 0xF3	; 243
 a8c:	41 e0       	ldi	r20, 0x01	; 1
 a8e:	50 e0       	ldi	r21, 0x00	; 0
 a90:	38 d0       	rcall	.+112    	; 0xb02 <__divmodsi4>
 a92:	49 01       	movw	r8, r18
 a94:	5a 01       	movw	r10, r20
 a96:	9b 01       	movw	r18, r22
 a98:	ac 01       	movw	r20, r24
 a9a:	a7 ea       	ldi	r26, 0xA7	; 167
 a9c:	b1 e4       	ldi	r27, 0x41	; 65
 a9e:	4d d0       	rcall	.+154    	; 0xb3a <__muluhisi3>
 aa0:	6b 01       	movw	r12, r22
 aa2:	7c 01       	movw	r14, r24
 aa4:	ac ee       	ldi	r26, 0xEC	; 236
 aa6:	b4 ef       	ldi	r27, 0xF4	; 244
 aa8:	a5 01       	movw	r20, r10
 aaa:	94 01       	movw	r18, r8
 aac:	52 d0       	rcall	.+164    	; 0xb52 <__mulohisi3>
 aae:	dc 01       	movw	r26, r24
 ab0:	cb 01       	movw	r24, r22
 ab2:	8c 0d       	add	r24, r12
 ab4:	9d 1d       	adc	r25, r13
 ab6:	ae 1d       	adc	r26, r14
 ab8:	bf 1d       	adc	r27, r15
 aba:	b7 ff       	sbrs	r27, 7
 abc:	03 c0       	rjmp	.+6      	; 0xac4 <do_rand+0x6c>
 abe:	01 97       	sbiw	r24, 0x01	; 1
 ac0:	a1 09       	sbc	r26, r1
 ac2:	b0 48       	sbci	r27, 0x80	; 128
 ac4:	88 83       	st	Y, r24
 ac6:	99 83       	std	Y+1, r25	; 0x01
 ac8:	aa 83       	std	Y+2, r26	; 0x02
 aca:	bb 83       	std	Y+3, r27	; 0x03
 acc:	9f 77       	andi	r25, 0x7F	; 127
 ace:	df 91       	pop	r29
 ad0:	cf 91       	pop	r28
 ad2:	ff 90       	pop	r15
 ad4:	ef 90       	pop	r14
 ad6:	df 90       	pop	r13
 ad8:	cf 90       	pop	r12
 ada:	bf 90       	pop	r11
 adc:	af 90       	pop	r10
 ade:	9f 90       	pop	r9
 ae0:	8f 90       	pop	r8
 ae2:	08 95       	ret

00000ae4 <rand_r>:
 ae4:	b9 cf       	rjmp	.-142    	; 0xa58 <do_rand>

00000ae6 <rand>:
 ae6:	80 e0       	ldi	r24, 0x00	; 0
 ae8:	91 e0       	ldi	r25, 0x01	; 1
 aea:	b6 cf       	rjmp	.-148    	; 0xa58 <do_rand>

00000aec <srand>:
 aec:	a0 e0       	ldi	r26, 0x00	; 0
 aee:	b0 e0       	ldi	r27, 0x00	; 0
 af0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 af4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 af8:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 afc:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 b00:	08 95       	ret

00000b02 <__divmodsi4>:
 b02:	05 2e       	mov	r0, r21
 b04:	97 fb       	bst	r25, 7
 b06:	16 f4       	brtc	.+4      	; 0xb0c <__divmodsi4+0xa>
 b08:	00 94       	com	r0
 b0a:	0f d0       	rcall	.+30     	; 0xb2a <__negsi2>
 b0c:	57 fd       	sbrc	r21, 7
 b0e:	05 d0       	rcall	.+10     	; 0xb1a <__divmodsi4_neg2>
 b10:	24 d0       	rcall	.+72     	; 0xb5a <__udivmodsi4>
 b12:	07 fc       	sbrc	r0, 7
 b14:	02 d0       	rcall	.+4      	; 0xb1a <__divmodsi4_neg2>
 b16:	46 f4       	brtc	.+16     	; 0xb28 <__divmodsi4_exit>
 b18:	08 c0       	rjmp	.+16     	; 0xb2a <__negsi2>

00000b1a <__divmodsi4_neg2>:
 b1a:	50 95       	com	r21
 b1c:	40 95       	com	r20
 b1e:	30 95       	com	r19
 b20:	21 95       	neg	r18
 b22:	3f 4f       	sbci	r19, 0xFF	; 255
 b24:	4f 4f       	sbci	r20, 0xFF	; 255
 b26:	5f 4f       	sbci	r21, 0xFF	; 255

00000b28 <__divmodsi4_exit>:
 b28:	08 95       	ret

00000b2a <__negsi2>:
 b2a:	90 95       	com	r25
 b2c:	80 95       	com	r24
 b2e:	70 95       	com	r23
 b30:	61 95       	neg	r22
 b32:	7f 4f       	sbci	r23, 0xFF	; 255
 b34:	8f 4f       	sbci	r24, 0xFF	; 255
 b36:	9f 4f       	sbci	r25, 0xFF	; 255
 b38:	08 95       	ret

00000b3a <__muluhisi3>:
 b3a:	31 d0       	rcall	.+98     	; 0xb9e <__umulhisi3>
 b3c:	a5 9f       	mul	r26, r21
 b3e:	90 0d       	add	r25, r0
 b40:	b4 9f       	mul	r27, r20
 b42:	90 0d       	add	r25, r0
 b44:	a4 9f       	mul	r26, r20
 b46:	80 0d       	add	r24, r0
 b48:	91 1d       	adc	r25, r1
 b4a:	11 24       	eor	r1, r1
 b4c:	08 95       	ret

00000b4e <__mulshisi3>:
 b4e:	b7 ff       	sbrs	r27, 7
 b50:	f4 cf       	rjmp	.-24     	; 0xb3a <__muluhisi3>

00000b52 <__mulohisi3>:
 b52:	f3 df       	rcall	.-26     	; 0xb3a <__muluhisi3>
 b54:	82 1b       	sub	r24, r18
 b56:	93 0b       	sbc	r25, r19
 b58:	08 95       	ret

00000b5a <__udivmodsi4>:
 b5a:	a1 e2       	ldi	r26, 0x21	; 33
 b5c:	1a 2e       	mov	r1, r26
 b5e:	aa 1b       	sub	r26, r26
 b60:	bb 1b       	sub	r27, r27
 b62:	fd 01       	movw	r30, r26
 b64:	0d c0       	rjmp	.+26     	; 0xb80 <__udivmodsi4_ep>

00000b66 <__udivmodsi4_loop>:
 b66:	aa 1f       	adc	r26, r26
 b68:	bb 1f       	adc	r27, r27
 b6a:	ee 1f       	adc	r30, r30
 b6c:	ff 1f       	adc	r31, r31
 b6e:	a2 17       	cp	r26, r18
 b70:	b3 07       	cpc	r27, r19
 b72:	e4 07       	cpc	r30, r20
 b74:	f5 07       	cpc	r31, r21
 b76:	20 f0       	brcs	.+8      	; 0xb80 <__udivmodsi4_ep>
 b78:	a2 1b       	sub	r26, r18
 b7a:	b3 0b       	sbc	r27, r19
 b7c:	e4 0b       	sbc	r30, r20
 b7e:	f5 0b       	sbc	r31, r21

00000b80 <__udivmodsi4_ep>:
 b80:	66 1f       	adc	r22, r22
 b82:	77 1f       	adc	r23, r23
 b84:	88 1f       	adc	r24, r24
 b86:	99 1f       	adc	r25, r25
 b88:	1a 94       	dec	r1
 b8a:	69 f7       	brne	.-38     	; 0xb66 <__udivmodsi4_loop>
 b8c:	60 95       	com	r22
 b8e:	70 95       	com	r23
 b90:	80 95       	com	r24
 b92:	90 95       	com	r25
 b94:	9b 01       	movw	r18, r22
 b96:	ac 01       	movw	r20, r24
 b98:	bd 01       	movw	r22, r26
 b9a:	cf 01       	movw	r24, r30
 b9c:	08 95       	ret

00000b9e <__umulhisi3>:
 b9e:	a2 9f       	mul	r26, r18
 ba0:	b0 01       	movw	r22, r0
 ba2:	b3 9f       	mul	r27, r19
 ba4:	c0 01       	movw	r24, r0
 ba6:	a3 9f       	mul	r26, r19
 ba8:	70 0d       	add	r23, r0
 baa:	81 1d       	adc	r24, r1
 bac:	11 24       	eor	r1, r1
 bae:	91 1d       	adc	r25, r1
 bb0:	b2 9f       	mul	r27, r18
 bb2:	70 0d       	add	r23, r0
 bb4:	81 1d       	adc	r24, r1
 bb6:	11 24       	eor	r1, r1
 bb8:	91 1d       	adc	r25, r1
 bba:	08 95       	ret

00000bbc <_exit>:
 bbc:	f8 94       	cli

00000bbe <__stop_program>:
 bbe:	ff cf       	rjmp	.-2      	; 0xbbe <__stop_program>
