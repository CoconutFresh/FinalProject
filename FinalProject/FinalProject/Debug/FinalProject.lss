
FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000b8a  00000c1e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b8a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  0080010a  0080010a  00000c28  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c28  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c58  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000c98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001064  00000000  00000000  00000d40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009f2  00000000  00000000  00001da4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009ec  00000000  00000000  00002796  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000168  00000000  00000000  00003184  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000692  00000000  00000000  000032ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003bb  00000000  00000000  0000397e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00003d39  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	56 c0       	rjmp	.+172    	; 0xae <__ctors_end>
   2:	00 00       	nop
   4:	71 c0       	rjmp	.+226    	; 0xe8 <__bad_interrupt>
   6:	00 00       	nop
   8:	6f c0       	rjmp	.+222    	; 0xe8 <__bad_interrupt>
   a:	00 00       	nop
   c:	6d c0       	rjmp	.+218    	; 0xe8 <__bad_interrupt>
   e:	00 00       	nop
  10:	6b c0       	rjmp	.+214    	; 0xe8 <__bad_interrupt>
  12:	00 00       	nop
  14:	69 c0       	rjmp	.+210    	; 0xe8 <__bad_interrupt>
  16:	00 00       	nop
  18:	67 c0       	rjmp	.+206    	; 0xe8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	65 c0       	rjmp	.+202    	; 0xe8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	63 c0       	rjmp	.+198    	; 0xe8 <__bad_interrupt>
  22:	00 00       	nop
  24:	61 c0       	rjmp	.+194    	; 0xe8 <__bad_interrupt>
  26:	00 00       	nop
  28:	5f c0       	rjmp	.+190    	; 0xe8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5d c0       	rjmp	.+186    	; 0xe8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	5b c0       	rjmp	.+182    	; 0xe8 <__bad_interrupt>
  32:	00 00       	nop
  34:	7e c0       	rjmp	.+252    	; 0x132 <__vector_13>
  36:	00 00       	nop
  38:	57 c0       	rjmp	.+174    	; 0xe8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	55 c0       	rjmp	.+170    	; 0xe8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	53 c0       	rjmp	.+166    	; 0xe8 <__bad_interrupt>
  42:	00 00       	nop
  44:	51 c0       	rjmp	.+162    	; 0xe8 <__bad_interrupt>
  46:	00 00       	nop
  48:	4f c0       	rjmp	.+158    	; 0xe8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4d c0       	rjmp	.+154    	; 0xe8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	4b c0       	rjmp	.+150    	; 0xe8 <__bad_interrupt>
  52:	00 00       	nop
  54:	49 c0       	rjmp	.+146    	; 0xe8 <__bad_interrupt>
  56:	00 00       	nop
  58:	47 c0       	rjmp	.+142    	; 0xe8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	45 c0       	rjmp	.+138    	; 0xe8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	43 c0       	rjmp	.+134    	; 0xe8 <__bad_interrupt>
  62:	00 00       	nop
  64:	41 c0       	rjmp	.+130    	; 0xe8 <__bad_interrupt>
  66:	00 00       	nop
  68:	3f c0       	rjmp	.+126    	; 0xe8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3d c0       	rjmp	.+122    	; 0xe8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	3b c0       	rjmp	.+118    	; 0xe8 <__bad_interrupt>
  72:	00 00       	nop
  74:	39 c0       	rjmp	.+114    	; 0xe8 <__bad_interrupt>
  76:	00 00       	nop
  78:	37 c0       	rjmp	.+110    	; 0xe8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	35 c0       	rjmp	.+106    	; 0xe8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	33 c0       	rjmp	.+102    	; 0xe8 <__bad_interrupt>
  82:	00 00       	nop
  84:	31 c0       	rjmp	.+98     	; 0xe8 <__bad_interrupt>
  86:	00 00       	nop
  88:	2f c0       	rjmp	.+94     	; 0xe8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	60 04       	cpc	r6, r0
  8e:	64 04       	cpc	r6, r4
  90:	6f 04       	cpc	r6, r15
  92:	7a 04       	cpc	r7, r10
  94:	85 04       	cpc	r8, r5
  96:	90 04       	cpc	r9, r0
  98:	9b 04       	cpc	r9, r11
  9a:	a6 04       	cpc	r10, r6
  9c:	b1 04       	cpc	r11, r1
  9e:	c6 04       	cpc	r12, r6
  a0:	c8 04       	cpc	r12, r8
  a2:	ca 04       	cpc	r12, r10
  a4:	cc 04       	cpc	r12, r12
  a6:	ce 04       	cpc	r12, r14
  a8:	d0 04       	cpc	r13, r0
  aa:	d2 04       	cpc	r13, r2
  ac:	d4 04       	cpc	r13, r4

000000ae <__ctors_end>:
  ae:	11 24       	eor	r1, r1
  b0:	1f be       	out	0x3f, r1	; 63
  b2:	cf ef       	ldi	r28, 0xFF	; 255
  b4:	d0 e4       	ldi	r29, 0x40	; 64
  b6:	de bf       	out	0x3e, r29	; 62
  b8:	cd bf       	out	0x3d, r28	; 61

000000ba <__do_copy_data>:
  ba:	11 e0       	ldi	r17, 0x01	; 1
  bc:	a0 e0       	ldi	r26, 0x00	; 0
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	ea e8       	ldi	r30, 0x8A	; 138
  c2:	fb e0       	ldi	r31, 0x0B	; 11
  c4:	00 e0       	ldi	r16, 0x00	; 0
  c6:	0b bf       	out	0x3b, r16	; 59
  c8:	02 c0       	rjmp	.+4      	; 0xce <__do_copy_data+0x14>
  ca:	07 90       	elpm	r0, Z+
  cc:	0d 92       	st	X+, r0
  ce:	aa 30       	cpi	r26, 0x0A	; 10
  d0:	b1 07       	cpc	r27, r17
  d2:	d9 f7       	brne	.-10     	; 0xca <__do_copy_data+0x10>

000000d4 <__do_clear_bss>:
  d4:	21 e0       	ldi	r18, 0x01	; 1
  d6:	aa e0       	ldi	r26, 0x0A	; 10
  d8:	b1 e0       	ldi	r27, 0x01	; 1
  da:	01 c0       	rjmp	.+2      	; 0xde <.do_clear_bss_start>

000000dc <.do_clear_bss_loop>:
  dc:	1d 92       	st	X+, r1

000000de <.do_clear_bss_start>:
  de:	ac 31       	cpi	r26, 0x1C	; 28
  e0:	b2 07       	cpc	r27, r18
  e2:	e1 f7       	brne	.-8      	; 0xdc <.do_clear_bss_loop>
  e4:	6c d4       	rcall	.+2264   	; 0x9be <main>
  e6:	4f c5       	rjmp	.+2718   	; 0xb86 <_exit>

000000e8 <__bad_interrupt>:
  e8:	8b cf       	rjmp	.-234    	; 0x0 <__vectors>

000000ea <TimerOn>:
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) { //x = unsigned char, k = position, b = HIGH/LOW
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
}
unsigned char GetBit(unsigned char x, unsigned char k) {
	return ((x & (0x01 << k)) != 0);
}
  ea:	8b e0       	ldi	r24, 0x0B	; 11
  ec:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  f0:	8d e7       	ldi	r24, 0x7D	; 125
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  f8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 102:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 106:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 10a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_avr_timer_M>
 10e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_avr_timer_M+0x1>
 112:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_avr_timer_M+0x2>
 116:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_avr_timer_M+0x3>
 11a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 11e:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 122:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <__data_end+0x2>
 126:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <__data_end+0x3>
 12a:	8f b7       	in	r24, 0x3f	; 63
 12c:	80 68       	ori	r24, 0x80	; 128
 12e:	8f bf       	out	0x3f, r24	; 63
 130:	08 95       	ret

00000132 <__vector_13>:
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	af 93       	push	r26
 142:	bf 93       	push	r27
 144:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 148:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 14c:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <__data_end+0x2>
 150:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <__data_end+0x3>
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	a1 09       	sbc	r26, r1
 158:	b1 09       	sbc	r27, r1
 15a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 15e:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 162:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <__data_end+0x2>
 166:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <__data_end+0x3>
 16a:	89 2b       	or	r24, r25
 16c:	8a 2b       	or	r24, r26
 16e:	8b 2b       	or	r24, r27
 170:	99 f4       	brne	.+38     	; 0x198 <__vector_13+0x66>
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <TimerFlag>
 178:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_avr_timer_M>
 17c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_avr_timer_M+0x1>
 180:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_avr_timer_M+0x2>
 184:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_avr_timer_M+0x3>
 188:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 18c:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 190:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <__data_end+0x2>
 194:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <__data_end+0x3>
 198:	bf 91       	pop	r27
 19a:	af 91       	pop	r26
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <TimerSet>:
 1aa:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <_avr_timer_M>
 1ae:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <_avr_timer_M+0x1>
 1b2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_avr_timer_M+0x2>
 1b6:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_avr_timer_M+0x3>
 1ba:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <__data_end>
 1be:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <__data_end+0x1>
 1c2:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end+0x2>
 1c6:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x3>
 1ca:	08 95       	ret

000001cc <turnEverythingOff>:


void turnEverythingOff() { //Turns all LEDs off
 1cc:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <column12>
 1d0:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <column34>
 1d4:	20 e0       	ldi	r18, 0x00	; 0
 1d6:	30 e0       	ldi	r19, 0x00	; 0
}


// Bit-access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) { //x = unsigned char, k = position, b = HIGH/LOW
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
 1d8:	61 e0       	ldi	r22, 0x01	; 1
 1da:	70 e0       	ldi	r23, 0x00	; 0
 1dc:	cb 01       	movw	r24, r22
 1de:	02 2e       	mov	r0, r18
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <turnEverythingOff+0x1a>
 1e2:	88 0f       	add	r24, r24
 1e4:	99 1f       	adc	r25, r25
 1e6:	0a 94       	dec	r0
 1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <turnEverythingOff+0x16>
 1ea:	80 95       	com	r24
 1ec:	58 23       	and	r21, r24
 1ee:	48 23       	and	r20, r24
 1f0:	2f 5f       	subi	r18, 0xFF	; 255
 1f2:	3f 4f       	sbci	r19, 0xFF	; 255
	return ((x & (0x01 << k)) != 0);
}


void turnEverythingOff() { //Turns all LEDs off
	for(unsigned char i = 0; i < 8; i++) {
 1f4:	28 30       	cpi	r18, 0x08	; 8
 1f6:	31 05       	cpc	r19, r1
 1f8:	89 f7       	brne	.-30     	; 0x1dc <turnEverythingOff+0x10>
 1fa:	50 93 13 01 	sts	0x0113, r21	; 0x800113 <column12>
 1fe:	40 93 12 01 	sts	0x0112, r20	; 0x800112 <column34>
}


// Bit-access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) { //x = unsigned char, k = position, b = HIGH/LOW
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
 202:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <layer>
 206:	80 7f       	andi	r24, 0xF0	; 240
 208:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <layer>
 20c:	08 95       	ret

0000020e <turnEverythingOn>:
	//layer = 0x00;
	//column12 = 0x00;
	//column34 = 0x00;
}

void turnEverythingOn() { //Turns all LEDs on
 20e:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <column12>
 212:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <column34>
 216:	20 e0       	ldi	r18, 0x00	; 0
 218:	30 e0       	ldi	r19, 0x00	; 0
}


// Bit-access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) { //x = unsigned char, k = position, b = HIGH/LOW
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
 21a:	61 e0       	ldi	r22, 0x01	; 1
 21c:	70 e0       	ldi	r23, 0x00	; 0
 21e:	cb 01       	movw	r24, r22
 220:	02 2e       	mov	r0, r18
 222:	02 c0       	rjmp	.+4      	; 0x228 <turnEverythingOn+0x1a>
 224:	88 0f       	add	r24, r24
 226:	99 1f       	adc	r25, r25
 228:	0a 94       	dec	r0
 22a:	e2 f7       	brpl	.-8      	; 0x224 <turnEverythingOn+0x16>
 22c:	80 95       	com	r24
 22e:	58 23       	and	r21, r24
 230:	48 23       	and	r20, r24
 232:	2f 5f       	subi	r18, 0xFF	; 255
 234:	3f 4f       	sbci	r19, 0xFF	; 255
	//column12 = 0x00;
	//column34 = 0x00;
}

void turnEverythingOn() { //Turns all LEDs on
	for(unsigned char i = 0; i < 8; i++) {
 236:	28 30       	cpi	r18, 0x08	; 8
 238:	31 05       	cpc	r19, r1
 23a:	89 f7       	brne	.-30     	; 0x21e <turnEverythingOn+0x10>
 23c:	50 93 13 01 	sts	0x0113, r21	; 0x800113 <column12>
 240:	40 93 12 01 	sts	0x0112, r20	; 0x800112 <column34>
}


// Bit-access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) { //x = unsigned char, k = position, b = HIGH/LOW
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
 244:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <layer>
 248:	8f 60       	ori	r24, 0x0F	; 15
 24a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <layer>
 24e:	08 95       	ret

00000250 <flickerOn>:
	//column34 = 0x00;
}

enum FLO_states{FLO_start, FLO_ON, FLO_OFF}FLO_state;
void flickerOn() { //WORKS
	switch (FLO_state) { //	TRANSITION
 250:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <FLO_state>
 254:	81 30       	cpi	r24, 0x01	; 1
 256:	41 f0       	breq	.+16     	; 0x268 <flickerOn+0x18>
 258:	18 f0       	brcs	.+6      	; 0x260 <flickerOn+0x10>
 25a:	82 30       	cpi	r24, 0x02	; 2
 25c:	49 f0       	breq	.+18     	; 0x270 <flickerOn+0x20>
 25e:	0c c0       	rjmp	.+24     	; 0x278 <flickerOn+0x28>
		case FLO_start:
			FLO_state = FLO_ON;
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <FLO_state>
			break;
 266:	10 c0       	rjmp	.+32     	; 0x288 <flickerOn+0x38>
		case FLO_ON:
			FLO_state = FLO_OFF;
 268:	82 e0       	ldi	r24, 0x02	; 2
 26a:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <FLO_state>
 26e:	0e c0       	rjmp	.+28     	; 0x28c <flickerOn+0x3c>
			break;
		case FLO_OFF:
			FLO_state = FLO_ON;
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <FLO_state>
			break;
 276:	08 c0       	rjmp	.+16     	; 0x288 <flickerOn+0x38>
	}
	
	switch (FLO_state) { //ACTIONS
 278:	81 30       	cpi	r24, 0x01	; 1
 27a:	31 f0       	breq	.+12     	; 0x288 <flickerOn+0x38>
 27c:	18 f0       	brcs	.+6      	; 0x284 <flickerOn+0x34>
 27e:	82 30       	cpi	r24, 0x02	; 2
 280:	31 f4       	brne	.+12     	; 0x28e <flickerOn+0x3e>
 282:	04 c0       	rjmp	.+8      	; 0x28c <flickerOn+0x3c>
		case FLO_start:
			turnEverythingOff();
 284:	a3 cf       	rjmp	.-186    	; 0x1cc <turnEverythingOff>
		break;
		case FLO_ON:
			turnEverythingOn();
 286:	08 95       	ret
		break;
 288:	c2 cf       	rjmp	.-124    	; 0x20e <turnEverythingOn>
		case FLO_OFF:
			turnEverythingOff();
 28a:	08 95       	ret
 28c:	9f cf       	rjmp	.-194    	; 0x1cc <turnEverythingOff>
 28e:	08 95       	ret

00000290 <layerCascade>:


enum LC_states{LC_start, LC_layer1, LC_layer2, LC_layer3, LC_layer4}LC_state;
void layerCascade() {
	
	switch (LC_state) { //transitions
 290:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <LC_state>
 294:	82 30       	cpi	r24, 0x02	; 2
 296:	11 f1       	breq	.+68     	; 0x2dc <layerCascade+0x4c>
 298:	28 f4       	brcc	.+10     	; 0x2a4 <layerCascade+0x14>
 29a:	88 23       	and	r24, r24
 29c:	41 f0       	breq	.+16     	; 0x2ae <layerCascade+0x1e>
 29e:	81 30       	cpi	r24, 0x01	; 1
 2a0:	69 f0       	breq	.+26     	; 0x2bc <layerCascade+0x2c>
 2a2:	4c c0       	rjmp	.+152    	; 0x33c <layerCascade+0xac>
 2a4:	83 30       	cpi	r24, 0x03	; 3
 2a6:	51 f1       	breq	.+84     	; 0x2fc <layerCascade+0x6c>
 2a8:	84 30       	cpi	r24, 0x04	; 4
 2aa:	c1 f1       	breq	.+112    	; 0x31c <layerCascade+0x8c>
 2ac:	47 c0       	rjmp	.+142    	; 0x33c <layerCascade+0xac>
		
		case LC_start: 
			count = 0;
 2ae:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <count>
			turnEverythingOff();
 2b2:	8c df       	rcall	.-232    	; 0x1cc <turnEverythingOff>
			LC_state = LC_layer1;
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <LC_state>
			break;
 2ba:	4b c0       	rjmp	.+150    	; 0x352 <layerCascade+0xc2>
		case LC_layer1:
			if (count == timing) {
 2bc:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <count>
 2c0:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <timing>
 2c4:	89 13       	cpse	r24, r25
 2c6:	06 c0       	rjmp	.+12     	; 0x2d4 <layerCascade+0x44>
				LC_state = LC_layer2;
 2c8:	82 e0       	ldi	r24, 0x02	; 2
 2ca:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <LC_state>
				count = 0;
 2ce:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <count>
 2d2:	46 c0       	rjmp	.+140    	; 0x360 <layerCascade+0xd0>
			}
			else {
				LC_state = LC_layer1;
				count++;
 2d4:	8f 5f       	subi	r24, 0xFF	; 255
 2d6:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <count>
 2da:	3b c0       	rjmp	.+118    	; 0x352 <layerCascade+0xc2>
			}
			break;
		case LC_layer2:
			if (count == timing) {
 2dc:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <count>
 2e0:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <timing>
 2e4:	89 13       	cpse	r24, r25
 2e6:	06 c0       	rjmp	.+12     	; 0x2f4 <layerCascade+0x64>
				LC_state = LC_layer3;
 2e8:	83 e0       	ldi	r24, 0x03	; 3
 2ea:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <LC_state>
				count = 0;
 2ee:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <count>
 2f2:	3d c0       	rjmp	.+122    	; 0x36e <layerCascade+0xde>
			}
			else {
				LC_state = LC_layer2;
				count++;
 2f4:	8f 5f       	subi	r24, 0xFF	; 255
 2f6:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <count>
 2fa:	32 c0       	rjmp	.+100    	; 0x360 <layerCascade+0xd0>
			}
			break;
		case LC_layer3:
			if (count == timing) {
 2fc:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <count>
 300:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <timing>
 304:	89 13       	cpse	r24, r25
 306:	06 c0       	rjmp	.+12     	; 0x314 <layerCascade+0x84>
				LC_state = LC_layer4;
 308:	84 e0       	ldi	r24, 0x04	; 4
 30a:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <LC_state>
				count = 0;
 30e:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <count>
 312:	34 c0       	rjmp	.+104    	; 0x37c <layerCascade+0xec>
			}
			else {
				LC_state = LC_layer3;
				count++;
 314:	8f 5f       	subi	r24, 0xFF	; 255
 316:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <count>
 31a:	29 c0       	rjmp	.+82     	; 0x36e <layerCascade+0xde>
			}
			break;
		case LC_layer4:
			if (count == timing) {
 31c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <count>
 320:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <timing>
 324:	89 13       	cpse	r24, r25
 326:	06 c0       	rjmp	.+12     	; 0x334 <layerCascade+0xa4>
				LC_state = LC_layer1;
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <LC_state>
				count = 0;
 32e:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <count>
 332:	0f c0       	rjmp	.+30     	; 0x352 <layerCascade+0xc2>
			}
			else {
				LC_state = LC_layer4;
				count++;
 334:	8f 5f       	subi	r24, 0xFF	; 255
 336:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <count>
 33a:	20 c0       	rjmp	.+64     	; 0x37c <layerCascade+0xec>
			}
			break;
	}
	switch (LC_state) { //ACTIONS
 33c:	82 30       	cpi	r24, 0x02	; 2
 33e:	81 f0       	breq	.+32     	; 0x360 <layerCascade+0xd0>
 340:	18 f4       	brcc	.+6      	; 0x348 <layerCascade+0xb8>
 342:	81 30       	cpi	r24, 0x01	; 1
 344:	09 f5       	brne	.+66     	; 0x388 <layerCascade+0xf8>
 346:	05 c0       	rjmp	.+10     	; 0x352 <layerCascade+0xc2>
 348:	83 30       	cpi	r24, 0x03	; 3
 34a:	89 f0       	breq	.+34     	; 0x36e <layerCascade+0xde>
 34c:	84 30       	cpi	r24, 0x04	; 4
 34e:	e1 f4       	brne	.+56     	; 0x388 <layerCascade+0xf8>
 350:	15 c0       	rjmp	.+42     	; 0x37c <layerCascade+0xec>
		case LC_layer1:
			layer = SetBit(layer, 3, 0);
			//layer = layer & 0x07;
			layer = SetBit(layer, 0, 1);
 352:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <layer>
 356:	87 7f       	andi	r24, 0xF7	; 247
 358:	81 60       	ori	r24, 0x01	; 1
 35a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <layer>
			//layer = layer | 0x01;
			break;
 35e:	08 95       	ret
		case LC_layer2:
			layer = SetBit(layer, 0 , 0);
			//layer = layer & 0x0E;
			layer = SetBit(layer, 1, 1);
 360:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <layer>
 364:	8e 7f       	andi	r24, 0xFE	; 254
 366:	82 60       	ori	r24, 0x02	; 2
 368:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <layer>
			//layer = layer | 0x02;
			break;
 36c:	08 95       	ret
		case LC_layer3:
			layer = SetBit(layer, 1 , 0);
			//layer = layer & 0x0D;
			layer = SetBit(layer, 2, 1);
 36e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <layer>
 372:	8d 7f       	andi	r24, 0xFD	; 253
 374:	84 60       	ori	r24, 0x04	; 4
 376:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <layer>
			//layer = layer | 0x04;
			break;
 37a:	08 95       	ret
		case LC_layer4:
			layer = SetBit(layer, 2 , 0);
			//layer = layer & 0x0B;
			layer = SetBit(layer, 3, 1);
 37c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <layer>
 380:	8b 7f       	andi	r24, 0xFB	; 251
 382:	88 60       	ori	r24, 0x08	; 8
 384:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <layer>
 388:	08 95       	ret

0000038a <columnCascade>:
}

enum CC_states{CC_start, CC_column1, CC_column2, CC_column3, CC_column4}CC_state;
void columnCascade() {
	
	switch (CC_state) { //TRANSITIONS
 38a:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <CC_state>
 38e:	82 30       	cpi	r24, 0x02	; 2
 390:	11 f1       	breq	.+68     	; 0x3d6 <columnCascade+0x4c>
 392:	28 f4       	brcc	.+10     	; 0x39e <columnCascade+0x14>
 394:	88 23       	and	r24, r24
 396:	41 f0       	breq	.+16     	; 0x3a8 <columnCascade+0x1e>
 398:	81 30       	cpi	r24, 0x01	; 1
 39a:	69 f0       	breq	.+26     	; 0x3b6 <columnCascade+0x2c>
 39c:	4c c0       	rjmp	.+152    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 39e:	83 30       	cpi	r24, 0x03	; 3
 3a0:	51 f1       	breq	.+84     	; 0x3f6 <columnCascade+0x6c>
 3a2:	84 30       	cpi	r24, 0x04	; 4
 3a4:	c1 f1       	breq	.+112    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 3a6:	47 c0       	rjmp	.+142    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
		case CC_start:
			turnEverythingOn();
 3a8:	32 df       	rcall	.-412    	; 0x20e <turnEverythingOn>
			count = 0;
 3aa:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <count>
			CC_state = CC_column1;
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <CC_state>
			break;
 3b4:	4b c0       	rjmp	.+150    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
		case (CC_column1):
			if (count == timing) {
 3b6:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <count>
 3ba:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <timing>
 3be:	89 13       	cpse	r24, r25
 3c0:	06 c0       	rjmp	.+12     	; 0x3ce <columnCascade+0x44>
				CC_state = CC_column2;
 3c2:	82 e0       	ldi	r24, 0x02	; 2
 3c4:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <CC_state>
				count = 0;
 3c8:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <count>
 3cc:	46 c0       	rjmp	.+140    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
			}
			else {
				CC_state = CC_column1;
				count++;
 3ce:	8f 5f       	subi	r24, 0xFF	; 255
 3d0:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <count>
 3d4:	3b c0       	rjmp	.+118    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
			}
			break;
		case (CC_column2):
			if (count == timing) {
 3d6:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <count>
 3da:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <timing>
 3de:	89 13       	cpse	r24, r25
 3e0:	06 c0       	rjmp	.+12     	; 0x3ee <columnCascade+0x64>
				CC_state = CC_column3;
 3e2:	83 e0       	ldi	r24, 0x03	; 3
 3e4:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <CC_state>
				count = 0;
 3e8:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <count>
 3ec:	3d c0       	rjmp	.+122    	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
			}
			else {
				CC_state = CC_column2;
				count++;
 3ee:	8f 5f       	subi	r24, 0xFF	; 255
 3f0:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <count>
 3f4:	32 c0       	rjmp	.+100    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
			}
			break;
		case (CC_column3):
			if (count == timing) {
 3f6:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <count>
 3fa:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <timing>
 3fe:	89 13       	cpse	r24, r25
 400:	06 c0       	rjmp	.+12     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
				CC_state = CC_column4;
 402:	84 e0       	ldi	r24, 0x04	; 4
 404:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <CC_state>
				count = 0;
 408:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <count>
 40c:	34 c0       	rjmp	.+104    	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
			}
			else {
				CC_state = CC_column3;
				count++;
 40e:	8f 5f       	subi	r24, 0xFF	; 255
 410:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <count>
 414:	29 c0       	rjmp	.+82     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
			}
			break;
		case (CC_column4):
			if (count == timing) {
 416:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <count>
 41a:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <timing>
 41e:	89 13       	cpse	r24, r25
 420:	06 c0       	rjmp	.+12     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
				CC_state = CC_column1;
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <CC_state>
				count = 0;
 428:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <count>
 42c:	0f c0       	rjmp	.+30     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
			}
			else {
				CC_state = CC_column4;
				count++;
 42e:	8f 5f       	subi	r24, 0xFF	; 255
 430:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <count>
 434:	20 c0       	rjmp	.+64     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
			}
		break;
	}
	switch (CC_state) { //ACTION
 436:	82 30       	cpi	r24, 0x02	; 2
 438:	81 f0       	breq	.+32     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 43a:	18 f4       	brcc	.+6      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 43c:	81 30       	cpi	r24, 0x01	; 1
 43e:	09 f5       	brne	.+66     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 440:	05 c0       	rjmp	.+10     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 442:	83 30       	cpi	r24, 0x03	; 3
 444:	89 f0       	breq	.+34     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 446:	84 30       	cpi	r24, 0x04	; 4
 448:	e1 f4       	brne	.+56     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 44a:	15 c0       	rjmp	.+42     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
		case CC_column1:
			column12 = 0xF0;
 44c:	80 ef       	ldi	r24, 0xF0	; 240
 44e:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <column12>
			column34 = 0xFF;
 452:	8f ef       	ldi	r24, 0xFF	; 255
 454:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <column34>
			break;
 458:	08 95       	ret
		case CC_column2:
			column12 = 0x0F;
 45a:	8f e0       	ldi	r24, 0x0F	; 15
 45c:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <column12>
			column34 = 0xFF;
 460:	8f ef       	ldi	r24, 0xFF	; 255
 462:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <column34>
			break;
 466:	08 95       	ret
		case CC_column3:
			column34 = 0xF0;
 468:	80 ef       	ldi	r24, 0xF0	; 240
 46a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <column34>
			column12 = 0xFF;
 46e:	8f ef       	ldi	r24, 0xFF	; 255
 470:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <column12>
			break;
 474:	08 95       	ret
		case CC_column4:
			column34 = 0x0F;
 476:	8f e0       	ldi	r24, 0x0F	; 15
 478:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <column34>
			column12 = 0xFF;
 47c:	8f ef       	ldi	r24, 0xFF	; 255
 47e:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <column12>
 482:	08 95       	ret

00000484 <layerExtend>:
	}
}

enum LE_states{LE_start, LE_state1, LE_state2, LE_state3, LE_state4}LE_state;
void layerExtend() { //works
	switch (LE_state) { //TRANSITIONS
 484:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <LE_state>
 488:	82 30       	cpi	r24, 0x02	; 2
 48a:	11 f1       	breq	.+68     	; 0x4d0 <layerExtend+0x4c>
 48c:	28 f4       	brcc	.+10     	; 0x498 <layerExtend+0x14>
 48e:	88 23       	and	r24, r24
 490:	41 f0       	breq	.+16     	; 0x4a2 <layerExtend+0x1e>
 492:	81 30       	cpi	r24, 0x01	; 1
 494:	69 f0       	breq	.+26     	; 0x4b0 <layerExtend+0x2c>
 496:	4e c0       	rjmp	.+156    	; 0x534 <layerExtend+0xb0>
 498:	83 30       	cpi	r24, 0x03	; 3
 49a:	51 f1       	breq	.+84     	; 0x4f0 <layerExtend+0x6c>
 49c:	84 30       	cpi	r24, 0x04	; 4
 49e:	c1 f1       	breq	.+112    	; 0x510 <layerExtend+0x8c>
 4a0:	49 c0       	rjmp	.+146    	; 0x534 <layerExtend+0xb0>
		case LE_start:
			turnEverythingOff();
 4a2:	94 de       	rcall	.-728    	; 0x1cc <turnEverythingOff>
			count = 0;
 4a4:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <count>
			LE_state = LE_state1;
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <LE_state>
			break;
 4ae:	4d c0       	rjmp	.+154    	; 0x54a <layerExtend+0xc6>
		case LE_state1:
			if (count == timing) {
 4b0:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <count>
 4b4:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <timing>
 4b8:	89 13       	cpse	r24, r25
 4ba:	06 c0       	rjmp	.+12     	; 0x4c8 <layerExtend+0x44>
				LE_state = LE_state2;
 4bc:	82 e0       	ldi	r24, 0x02	; 2
 4be:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <LE_state>
				count = 0;
 4c2:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <count>
 4c6:	47 c0       	rjmp	.+142    	; 0x556 <layerExtend+0xd2>
			}
			else {
				LE_state = LE_state1;
				count++;
 4c8:	8f 5f       	subi	r24, 0xFF	; 255
 4ca:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <count>
 4ce:	3d c0       	rjmp	.+122    	; 0x54a <layerExtend+0xc6>
			}
			break;
		case LE_state2:
			if (count == timing) {
 4d0:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <count>
 4d4:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <timing>
 4d8:	89 13       	cpse	r24, r25
 4da:	06 c0       	rjmp	.+12     	; 0x4e8 <layerExtend+0x64>
				LE_state = LE_state3;
 4dc:	83 e0       	ldi	r24, 0x03	; 3
 4de:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <LE_state>
				count = 0;
 4e2:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <count>
 4e6:	3d c0       	rjmp	.+122    	; 0x562 <layerExtend+0xde>
			}
			else {
				LE_state = LE_state2;
				count++;
 4e8:	8f 5f       	subi	r24, 0xFF	; 255
 4ea:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <count>
 4ee:	33 c0       	rjmp	.+102    	; 0x556 <layerExtend+0xd2>
			}
			break;
		case LE_state3:
			if (count == timing) {
 4f0:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <count>
 4f4:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <timing>
 4f8:	89 13       	cpse	r24, r25
 4fa:	06 c0       	rjmp	.+12     	; 0x508 <layerExtend+0x84>
				LE_state = LE_state4;
 4fc:	84 e0       	ldi	r24, 0x04	; 4
 4fe:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <LE_state>
				count = 0;
 502:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <count>
 506:	33 c0       	rjmp	.+102    	; 0x56e <layerExtend+0xea>
			}
			else {
				LE_state = LE_state3;
				count++;
 508:	8f 5f       	subi	r24, 0xFF	; 255
 50a:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <count>
 50e:	29 c0       	rjmp	.+82     	; 0x562 <layerExtend+0xde>
			}
			break;
		case LE_state4:
			if (count == timing) {
 510:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <count>
 514:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <timing>
 518:	89 13       	cpse	r24, r25
 51a:	08 c0       	rjmp	.+16     	; 0x52c <layerExtend+0xa8>
				layer = 0x00; //resets
 51c:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <layer>
				LE_state = LE_state1;
 520:	81 e0       	ldi	r24, 0x01	; 1
 522:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <LE_state>
				count = 0;
 526:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <count>
 52a:	0f c0       	rjmp	.+30     	; 0x54a <layerExtend+0xc6>
			}
			else {
				LE_state = LE_state4;
				count++;
 52c:	8f 5f       	subi	r24, 0xFF	; 255
 52e:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <count>
 532:	1d c0       	rjmp	.+58     	; 0x56e <layerExtend+0xea>
			}
		break;
	}
	switch (LE_state) { //ACTION
 534:	82 30       	cpi	r24, 0x02	; 2
 536:	79 f0       	breq	.+30     	; 0x556 <layerExtend+0xd2>
 538:	18 f4       	brcc	.+6      	; 0x540 <layerExtend+0xbc>
 53a:	81 30       	cpi	r24, 0x01	; 1
 53c:	e9 f4       	brne	.+58     	; 0x578 <layerExtend+0xf4>
 53e:	05 c0       	rjmp	.+10     	; 0x54a <layerExtend+0xc6>
 540:	83 30       	cpi	r24, 0x03	; 3
 542:	79 f0       	breq	.+30     	; 0x562 <layerExtend+0xde>
 544:	84 30       	cpi	r24, 0x04	; 4
 546:	c1 f4       	brne	.+48     	; 0x578 <layerExtend+0xf4>
 548:	12 c0       	rjmp	.+36     	; 0x56e <layerExtend+0xea>
		case LE_state1:
			layer = SetBit(layer, 0, 1);
 54a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <layer>
 54e:	81 60       	ori	r24, 0x01	; 1
 550:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <layer>
		break;
 554:	08 95       	ret
		case LE_state2: 
			layer = SetBit(layer, 1, 1);
 556:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <layer>
 55a:	82 60       	ori	r24, 0x02	; 2
 55c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <layer>
		break;
 560:	08 95       	ret
		case LE_state3:
			layer = SetBit(layer, 2, 1);
 562:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <layer>
 566:	84 60       	ori	r24, 0x04	; 4
 568:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <layer>
		break;
 56c:	08 95       	ret
		case LE_state4:
			layer = SetBit(layer, 3, 1);
 56e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <layer>
 572:	88 60       	ori	r24, 0x08	; 8
 574:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <layer>
 578:	08 95       	ret

0000057a <randomFlicker>:

//void aroundEdgeDown() {
	//
//}
enum RF_states{RF_start, RF_lit, RF_reset}RF_state;
void randomFlicker() { //WORKS
 57a:	cf 93       	push	r28
 57c:	df 93       	push	r29
	unsigned char randomLayer;
	unsigned char randomColumnMacro;
	unsigned char randomColumn;
	switch (RF_state) { //TRANSISTIONS
 57e:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <RF_state>
 582:	91 30       	cpi	r25, 0x01	; 1
 584:	41 f1       	breq	.+80     	; 0x5d6 <randomFlicker+0x5c>
 586:	18 f0       	brcs	.+6      	; 0x58e <randomFlicker+0x14>
 588:	92 30       	cpi	r25, 0x02	; 2
 58a:	b1 f1       	breq	.+108    	; 0x5f8 <randomFlicker+0x7e>
 58c:	63 c0       	rjmp	.+198    	; 0x654 <randomFlicker+0xda>
		case RF_start:
			count = 0;
 58e:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <count>
			turnEverythingOff();
 592:	1c de       	rcall	.-968    	; 0x1cc <turnEverythingOff>
			randomLayer = rand() % 4;
 594:	8d d2       	rcall	.+1306   	; 0xab0 <rand>
 596:	83 70       	andi	r24, 0x03	; 3
 598:	90 78       	andi	r25, 0x80	; 128
 59a:	99 23       	and	r25, r25
 59c:	24 f4       	brge	.+8      	; 0x5a6 <randomFlicker+0x2c>
 59e:	01 97       	sbiw	r24, 0x01	; 1
 5a0:	8c 6f       	ori	r24, 0xFC	; 252
 5a2:	9f 6f       	ori	r25, 0xFF	; 255
 5a4:	01 96       	adiw	r24, 0x01	; 1
 5a6:	d8 2f       	mov	r29, r24
			randomColumnMacro = rand() % 2;
 5a8:	83 d2       	rcall	.+1286   	; 0xab0 <rand>
 5aa:	81 70       	andi	r24, 0x01	; 1
 5ac:	90 78       	andi	r25, 0x80	; 128
 5ae:	99 23       	and	r25, r25
 5b0:	24 f4       	brge	.+8      	; 0x5ba <randomFlicker+0x40>
 5b2:	01 97       	sbiw	r24, 0x01	; 1
 5b4:	8e 6f       	ori	r24, 0xFE	; 254
 5b6:	9f 6f       	ori	r25, 0xFF	; 255
 5b8:	01 96       	adiw	r24, 0x01	; 1
 5ba:	c8 2f       	mov	r28, r24
			randomColumn = rand() % 8;
 5bc:	79 d2       	rcall	.+1266   	; 0xab0 <rand>
 5be:	87 70       	andi	r24, 0x07	; 7
 5c0:	90 78       	andi	r25, 0x80	; 128
 5c2:	99 23       	and	r25, r25
 5c4:	24 f4       	brge	.+8      	; 0x5ce <randomFlicker+0x54>
 5c6:	01 97       	sbiw	r24, 0x01	; 1
 5c8:	88 6f       	ori	r24, 0xF8	; 248
 5ca:	9f 6f       	ori	r25, 0xFF	; 255
 5cc:	01 96       	adiw	r24, 0x01	; 1
 5ce:	91 e0       	ldi	r25, 0x01	; 1
			RF_state = RF_lit;
 5d0:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <RF_state>
 5d4:	44 c0       	rjmp	.+136    	; 0x65e <randomFlicker+0xe4>
		break;
 5d6:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <count>
		case RF_lit:
			if (count == 2) {
 5da:	92 30       	cpi	r25, 0x02	; 2
 5dc:	31 f4       	brne	.+12     	; 0x5ea <randomFlicker+0x70>
 5de:	82 e0       	ldi	r24, 0x02	; 2
				RF_state = RF_reset;
 5e0:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <RF_state>
 5e4:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <count>
				count = 0;
 5e8:	68 c0       	rjmp	.+208    	; 0x6ba <randomFlicker+0x140>
 5ea:	9f 5f       	subi	r25, 0xFF	; 255
			}
			else {
				count++;
 5ec:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <count>
 5f0:	91 e0       	ldi	r25, 0x01	; 1
				RF_state = RF_lit;
 5f2:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <RF_state>
 5f6:	33 c0       	rjmp	.+102    	; 0x65e <randomFlicker+0xe4>
 5f8:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <count>
			}
		break;
		case RF_reset:
			if (count == 2) {
 5fc:	82 30       	cpi	r24, 0x02	; 2
 5fe:	19 f5       	brne	.+70     	; 0x646 <randomFlicker+0xcc>
				randomLayer = rand() % 4;
 600:	57 d2       	rcall	.+1198   	; 0xab0 <rand>
 602:	83 70       	andi	r24, 0x03	; 3
 604:	90 78       	andi	r25, 0x80	; 128
 606:	99 23       	and	r25, r25
 608:	24 f4       	brge	.+8      	; 0x612 <randomFlicker+0x98>
 60a:	01 97       	sbiw	r24, 0x01	; 1
 60c:	8c 6f       	ori	r24, 0xFC	; 252
 60e:	9f 6f       	ori	r25, 0xFF	; 255
 610:	01 96       	adiw	r24, 0x01	; 1
 612:	d8 2f       	mov	r29, r24
				randomColumnMacro = rand() % 2;
 614:	4d d2       	rcall	.+1178   	; 0xab0 <rand>
 616:	81 70       	andi	r24, 0x01	; 1
 618:	90 78       	andi	r25, 0x80	; 128
 61a:	99 23       	and	r25, r25
 61c:	24 f4       	brge	.+8      	; 0x626 <randomFlicker+0xac>
 61e:	01 97       	sbiw	r24, 0x01	; 1
 620:	8e 6f       	ori	r24, 0xFE	; 254
 622:	9f 6f       	ori	r25, 0xFF	; 255
 624:	01 96       	adiw	r24, 0x01	; 1
 626:	c8 2f       	mov	r28, r24
				randomColumn = rand() % 8;
 628:	43 d2       	rcall	.+1158   	; 0xab0 <rand>
 62a:	87 70       	andi	r24, 0x07	; 7
 62c:	90 78       	andi	r25, 0x80	; 128
 62e:	99 23       	and	r25, r25
 630:	24 f4       	brge	.+8      	; 0x63a <randomFlicker+0xc0>
 632:	01 97       	sbiw	r24, 0x01	; 1
 634:	88 6f       	ori	r24, 0xF8	; 248
 636:	9f 6f       	ori	r25, 0xFF	; 255
 638:	01 96       	adiw	r24, 0x01	; 1
 63a:	91 e0       	ldi	r25, 0x01	; 1
				RF_state = RF_lit;
 63c:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <RF_state>
 640:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <count>
				count = 0;
 644:	0c c0       	rjmp	.+24     	; 0x65e <randomFlicker+0xe4>
 646:	8f 5f       	subi	r24, 0xFF	; 255
			}
			else {
				count++;
 648:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <count>
 64c:	82 e0       	ldi	r24, 0x02	; 2
				RF_state = RF_reset;
 64e:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <RF_state>
 652:	33 c0       	rjmp	.+102    	; 0x6ba <randomFlicker+0x140>
 654:	91 30       	cpi	r25, 0x01	; 1
			}
		break;
	}
	switch (RF_state) { //ACTIONS
 656:	19 f0       	breq	.+6      	; 0x65e <randomFlicker+0xe4>
 658:	92 30       	cpi	r25, 0x02	; 2
 65a:	81 f5       	brne	.+96     	; 0x6bc <randomFlicker+0x142>
 65c:	2e c0       	rjmp	.+92     	; 0x6ba <randomFlicker+0x140>
 65e:	21 e0       	ldi	r18, 0x01	; 1
		case RF_lit:
			layer = SetBit(layer, randomLayer, 1);
 660:	30 e0       	ldi	r19, 0x00	; 0
 662:	02 c0       	rjmp	.+4      	; 0x668 <randomFlicker+0xee>
 664:	22 0f       	add	r18, r18
 666:	33 1f       	adc	r19, r19
 668:	da 95       	dec	r29
 66a:	e2 f7       	brpl	.-8      	; 0x664 <randomFlicker+0xea>
 66c:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <layer>
 670:	29 2b       	or	r18, r25
 672:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <layer>
 676:	c1 11       	cpse	r28, r1
			if (randomColumnMacro == 0)
 678:	0f c0       	rjmp	.+30     	; 0x698 <randomFlicker+0x11e>
 67a:	21 e0       	ldi	r18, 0x01	; 1
				column12 = SetBit(column12, randomColumn, 1);
 67c:	30 e0       	ldi	r19, 0x00	; 0
 67e:	a9 01       	movw	r20, r18
 680:	02 c0       	rjmp	.+4      	; 0x686 <randomFlicker+0x10c>
 682:	44 0f       	add	r20, r20
 684:	55 1f       	adc	r21, r21
 686:	8a 95       	dec	r24
 688:	e2 f7       	brpl	.-8      	; 0x682 <randomFlicker+0x108>
 68a:	ca 01       	movw	r24, r20
 68c:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <column12>
 690:	89 2b       	or	r24, r25
 692:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <column12>
 696:	12 c0       	rjmp	.+36     	; 0x6bc <randomFlicker+0x142>
 698:	c1 30       	cpi	r28, 0x01	; 1
			else if (randomColumnMacro == 1)
 69a:	81 f4       	brne	.+32     	; 0x6bc <randomFlicker+0x142>
 69c:	21 e0       	ldi	r18, 0x01	; 1
				column34 = SetBit(column34, randomColumn, 1);
 69e:	30 e0       	ldi	r19, 0x00	; 0
 6a0:	a9 01       	movw	r20, r18
 6a2:	02 c0       	rjmp	.+4      	; 0x6a8 <randomFlicker+0x12e>
 6a4:	44 0f       	add	r20, r20
 6a6:	55 1f       	adc	r21, r21
 6a8:	8a 95       	dec	r24
 6aa:	e2 f7       	brpl	.-8      	; 0x6a4 <randomFlicker+0x12a>
 6ac:	ca 01       	movw	r24, r20
 6ae:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <column34>
 6b2:	89 2b       	or	r24, r25
 6b4:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <column34>
 6b8:	01 c0       	rjmp	.+2      	; 0x6bc <randomFlicker+0x142>
		break;
		case RF_reset:
			turnEverythingOff();
 6ba:	88 dd       	rcall	.-1264   	; 0x1cc <turnEverythingOff>
 6bc:	df 91       	pop	r29
		break;
	}
}
 6be:	cf 91       	pop	r28
 6c0:	08 95       	ret

000006c2 <randomRain>:
 6c2:	cf 93       	push	r28
enum RR_states{RR_start, RR_1, RR_2, RR_3, RR_4, RR_5}RR_state;
void randomRain() {
	unsigned char randomLayer;
	unsigned char randomColumnMacro;
	unsigned char randomColumn;
	switch (RR_state) {
 6c4:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <RR_state>
 6c8:	92 30       	cpi	r25, 0x02	; 2
 6ca:	09 f4       	brne	.+2      	; 0x6ce <randomRain+0xc>
 6cc:	3b c0       	rjmp	.+118    	; 0x744 <randomRain+0x82>
 6ce:	28 f4       	brcc	.+10     	; 0x6da <randomRain+0x18>
 6d0:	99 23       	and	r25, r25
 6d2:	61 f0       	breq	.+24     	; 0x6ec <randomRain+0x2a>
 6d4:	91 30       	cpi	r25, 0x01	; 1
 6d6:	29 f1       	breq	.+74     	; 0x722 <randomRain+0x60>
 6d8:	78 c0       	rjmp	.+240    	; 0x7ca <randomRain+0x108>
 6da:	94 30       	cpi	r25, 0x04	; 4
 6dc:	09 f4       	brne	.+2      	; 0x6e0 <randomRain+0x1e>
 6de:	54 c0       	rjmp	.+168    	; 0x788 <randomRain+0xc6>
 6e0:	08 f4       	brcc	.+2      	; 0x6e4 <randomRain+0x22>
 6e2:	41 c0       	rjmp	.+130    	; 0x766 <randomRain+0xa4>
 6e4:	95 30       	cpi	r25, 0x05	; 5
 6e6:	09 f4       	brne	.+2      	; 0x6ea <randomRain+0x28>
 6e8:	60 c0       	rjmp	.+192    	; 0x7aa <randomRain+0xe8>
 6ea:	6f c0       	rjmp	.+222    	; 0x7ca <randomRain+0x108>
		case RR_start:
			count = 0;
 6ec:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <count>
			turnEverythingOff();
 6f0:	6d dd       	rcall	.-1318   	; 0x1cc <turnEverythingOff>
			randomLayer = rand() % 4;
 6f2:	de d1       	rcall	.+956    	; 0xab0 <rand>
			randomColumnMacro = rand() % 2;
 6f4:	dd d1       	rcall	.+954    	; 0xab0 <rand>
 6f6:	81 70       	andi	r24, 0x01	; 1
 6f8:	90 78       	andi	r25, 0x80	; 128
 6fa:	99 23       	and	r25, r25
 6fc:	24 f4       	brge	.+8      	; 0x706 <randomRain+0x44>
 6fe:	01 97       	sbiw	r24, 0x01	; 1
 700:	8e 6f       	ori	r24, 0xFE	; 254
 702:	9f 6f       	ori	r25, 0xFF	; 255
 704:	01 96       	adiw	r24, 0x01	; 1
 706:	c8 2f       	mov	r28, r24
			randomColumn = rand() % 8;
 708:	d3 d1       	rcall	.+934    	; 0xab0 <rand>
 70a:	87 70       	andi	r24, 0x07	; 7
 70c:	90 78       	andi	r25, 0x80	; 128
 70e:	99 23       	and	r25, r25
 710:	24 f4       	brge	.+8      	; 0x71a <randomRain+0x58>
 712:	01 97       	sbiw	r24, 0x01	; 1
 714:	88 6f       	ori	r24, 0xF8	; 248
 716:	9f 6f       	ori	r25, 0xFF	; 255
 718:	01 96       	adiw	r24, 0x01	; 1
 71a:	91 e0       	ldi	r25, 0x01	; 1
			RR_state = RR_1;
 71c:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <RR_state>
 720:	63 c0       	rjmp	.+198    	; 0x7e8 <randomRain+0x126>
			break;
 722:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <count>
		case RR_1:
			if (count == 1) {
 726:	91 30       	cpi	r25, 0x01	; 1
 728:	31 f4       	brne	.+12     	; 0x736 <randomRain+0x74>
 72a:	82 e0       	ldi	r24, 0x02	; 2
				RR_state = RR_2;
 72c:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <RR_state>
 730:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <count>
				count = 0;
 734:	82 c0       	rjmp	.+260    	; 0x83a <randomRain+0x178>
 736:	9f 5f       	subi	r25, 0xFF	; 255
			}
			else {
				count++;
 738:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <count>
 73c:	91 e0       	ldi	r25, 0x01	; 1
				RF_state = RR_1;
 73e:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <RF_state>
 742:	52 c0       	rjmp	.+164    	; 0x7e8 <randomRain+0x126>
 744:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <count>
			}
			break;
		case RR_2:
			if (count == 1) {
 748:	81 30       	cpi	r24, 0x01	; 1
 74a:	31 f4       	brne	.+12     	; 0x758 <randomRain+0x96>
 74c:	83 e0       	ldi	r24, 0x03	; 3
				RR_state = RR_3;
 74e:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <RR_state>
 752:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <count>
				count = 0;
 756:	78 c0       	rjmp	.+240    	; 0x848 <randomRain+0x186>
 758:	8f 5f       	subi	r24, 0xFF	; 255
			}
			else {
				count++;
 75a:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <count>
 75e:	82 e0       	ldi	r24, 0x02	; 2
				RF_state = RR_2;
 760:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <RF_state>
 764:	6a c0       	rjmp	.+212    	; 0x83a <randomRain+0x178>
 766:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <count>
			}
		break;
		case RR_3:
			if (count == 1) {
 76a:	81 30       	cpi	r24, 0x01	; 1
 76c:	31 f4       	brne	.+12     	; 0x77a <randomRain+0xb8>
 76e:	84 e0       	ldi	r24, 0x04	; 4
				RR_state = RR_4;
 770:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <RR_state>
 774:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <count>
				count = 0;
 778:	6e c0       	rjmp	.+220    	; 0x856 <randomRain+0x194>
 77a:	8f 5f       	subi	r24, 0xFF	; 255
			}
			else {
				count++;
 77c:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <count>
 780:	83 e0       	ldi	r24, 0x03	; 3
				RF_state = RR_3;
 782:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <RF_state>
 786:	60 c0       	rjmp	.+192    	; 0x848 <randomRain+0x186>
 788:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <count>
			}
		break;
		case RR_4:
			if (count == 1) {
 78c:	81 30       	cpi	r24, 0x01	; 1
 78e:	31 f4       	brne	.+12     	; 0x79c <randomRain+0xda>
 790:	85 e0       	ldi	r24, 0x05	; 5
				RR_state = RR_5;
 792:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <RR_state>
 796:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <count>
				count = 0;
 79a:	64 c0       	rjmp	.+200    	; 0x864 <randomRain+0x1a2>
 79c:	8f 5f       	subi	r24, 0xFF	; 255
			}
			else {
				count++;
 79e:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <count>
 7a2:	84 e0       	ldi	r24, 0x04	; 4
				RF_state = RR_4;
 7a4:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <RF_state>
 7a8:	56 c0       	rjmp	.+172    	; 0x856 <randomRain+0x194>
 7aa:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <count>
			}
		break;
		case RR_5:
			if (count == 1) {
 7ae:	81 30       	cpi	r24, 0x01	; 1
 7b0:	29 f4       	brne	.+10     	; 0x7bc <randomRain+0xfa>
 7b2:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <RR_state>
				RR_state = RR_start;
 7b6:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <count>
				count = 0;
 7ba:	5e c0       	rjmp	.+188    	; 0x878 <randomRain+0x1b6>
 7bc:	8f 5f       	subi	r24, 0xFF	; 255
			}
			else {
				count++;
 7be:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <count>
 7c2:	85 e0       	ldi	r24, 0x05	; 5
				RF_state = RR_5;
 7c4:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <RF_state>
 7c8:	4d c0       	rjmp	.+154    	; 0x864 <randomRain+0x1a2>
 7ca:	93 30       	cpi	r25, 0x03	; 3
			}
		break;
	}
	switch(RR_state) {
 7cc:	e9 f1       	breq	.+122    	; 0x848 <randomRain+0x186>
 7ce:	30 f4       	brcc	.+12     	; 0x7dc <randomRain+0x11a>
 7d0:	91 30       	cpi	r25, 0x01	; 1
 7d2:	51 f0       	breq	.+20     	; 0x7e8 <randomRain+0x126>
 7d4:	92 30       	cpi	r25, 0x02	; 2
 7d6:	09 f0       	breq	.+2      	; 0x7da <randomRain+0x118>
 7d8:	4f c0       	rjmp	.+158    	; 0x878 <randomRain+0x1b6>
 7da:	2f c0       	rjmp	.+94     	; 0x83a <randomRain+0x178>
 7dc:	94 30       	cpi	r25, 0x04	; 4
 7de:	d9 f1       	breq	.+118    	; 0x856 <randomRain+0x194>
 7e0:	95 30       	cpi	r25, 0x05	; 5
 7e2:	09 f0       	breq	.+2      	; 0x7e6 <randomRain+0x124>
 7e4:	49 c0       	rjmp	.+146    	; 0x878 <randomRain+0x1b6>
 7e6:	3e c0       	rjmp	.+124    	; 0x864 <randomRain+0x1a2>
 7e8:	c1 11       	cpse	r28, r1
		case RR_1:
			if (randomColumnMacro == 0) {
 7ea:	10 c0       	rjmp	.+32     	; 0x80c <randomRain+0x14a>
 7ec:	21 e0       	ldi	r18, 0x01	; 1
				column12 = SetBit(column12, randomColumn, 0);
 7ee:	30 e0       	ldi	r19, 0x00	; 0
 7f0:	a9 01       	movw	r20, r18
 7f2:	02 c0       	rjmp	.+4      	; 0x7f8 <randomRain+0x136>
 7f4:	44 0f       	add	r20, r20
 7f6:	55 1f       	adc	r21, r21
 7f8:	8a 95       	dec	r24
 7fa:	e2 f7       	brpl	.-8      	; 0x7f4 <randomRain+0x132>
 7fc:	ca 01       	movw	r24, r20
 7fe:	80 95       	com	r24
 800:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <column12>
 804:	89 23       	and	r24, r25
 806:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <column12>
 80a:	11 c0       	rjmp	.+34     	; 0x82e <randomRain+0x16c>
 80c:	c2 30       	cpi	r28, 0x02	; 2
			}
			else if (randomColumnMacro == 2) {
 80e:	79 f4       	brne	.+30     	; 0x82e <randomRain+0x16c>
 810:	21 e0       	ldi	r18, 0x01	; 1
				column34 = SetBit(column34, randomColumn, 0);
 812:	30 e0       	ldi	r19, 0x00	; 0
 814:	a9 01       	movw	r20, r18
 816:	02 c0       	rjmp	.+4      	; 0x81c <randomRain+0x15a>
 818:	44 0f       	add	r20, r20
 81a:	55 1f       	adc	r21, r21
 81c:	8a 95       	dec	r24
 81e:	e2 f7       	brpl	.-8      	; 0x818 <randomRain+0x156>
 820:	ca 01       	movw	r24, r20
 822:	80 95       	com	r24
 824:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <column34>
 828:	89 23       	and	r24, r25
 82a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <column34>
 82e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <layer>
			}
			layer = SetBit(layer, 0, 1);
 832:	81 60       	ori	r24, 0x01	; 1
 834:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <layer>
 838:	1f c0       	rjmp	.+62     	; 0x878 <randomRain+0x1b6>
			break;
 83a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <layer>
		case RR_2:
			layer = SetBit(layer, 0, 0);
			layer = SetBit(layer, 1, 1);
 83e:	8e 7f       	andi	r24, 0xFE	; 254
 840:	82 60       	ori	r24, 0x02	; 2
 842:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <layer>
 846:	18 c0       	rjmp	.+48     	; 0x878 <randomRain+0x1b6>
			break;
 848:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <layer>
		case RR_3:
			layer = SetBit(layer, 1, 0);
			layer = SetBit(layer, 2, 1);
 84c:	8d 7f       	andi	r24, 0xFD	; 253
 84e:	84 60       	ori	r24, 0x04	; 4
 850:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <layer>
 854:	11 c0       	rjmp	.+34     	; 0x878 <randomRain+0x1b6>
			break;
 856:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <layer>
		case RR_4:
			layer = SetBit(layer, 2, 0);
			layer = SetBit(layer, 3, 1);
 85a:	8b 7f       	andi	r24, 0xFB	; 251
 85c:	88 60       	ori	r24, 0x08	; 8
 85e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <layer>
 862:	0a c0       	rjmp	.+20     	; 0x878 <randomRain+0x1b6>
			break;
 864:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <layer>
		case RR_5:
			layer = SetBit(layer, 3, 0);
 868:	87 7f       	andi	r24, 0xF7	; 247
 86a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <layer>
 86e:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <column12>
			if (randomColumnMacro == 0) {
				column12 = SetBit(column12, randomColumn, 1);
 872:	81 60       	ori	r24, 0x01	; 1
 874:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <column12>
 878:	cf 91       	pop	r28
			else if (randomColumnMacro == 2) {
				column34 = SetBit(column34, randomColumn, 1);
			}
			break;
	}
}
 87a:	08 95       	ret

0000087c <buttonToggle>:
 87c:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <button>


unsigned char buttonToggle() {
	if (button && !hold) {
 880:	99 23       	and	r25, r25
 882:	41 f0       	breq	.+16     	; 0x894 <buttonToggle+0x18>
 884:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <hold>
 888:	81 11       	cpse	r24, r1
 88a:	0c c0       	rjmp	.+24     	; 0x8a4 <buttonToggle+0x28>
		hold = 1;
 88c:	81 e0       	ldi	r24, 0x01	; 1
 88e:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <hold>
		return 1;
 892:	08 95       	ret
	}
	else if (!button && hold) {
 894:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <hold>
 898:	88 23       	and	r24, r24
 89a:	29 f0       	breq	.+10     	; 0x8a6 <buttonToggle+0x2a>
		hold = 0;
 89c:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <hold>
		return 0;
 8a0:	89 2f       	mov	r24, r25
 8a2:	08 95       	ret
	}
	return 0; //(!button && !hold)  and (button && hold)
 8a4:	80 e0       	ldi	r24, 0x00	; 0
}
 8a6:	08 95       	ret

000008a8 <tick>:

enum {start, OFF, ON, FO, LC, CC, LE, RF, RR}state;
void tick() {
	switch (state) { //transitions
 8a8:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <state>
 8ac:	8e 2f       	mov	r24, r30
 8ae:	90 e0       	ldi	r25, 0x00	; 0
 8b0:	89 30       	cpi	r24, 0x09	; 9
 8b2:	91 05       	cpc	r25, r1
 8b4:	08 f0       	brcs	.+2      	; 0x8b8 <tick+0x10>
 8b6:	60 c0       	rjmp	.+192    	; 0x978 <tick+0xd0>
 8b8:	fc 01       	movw	r30, r24
 8ba:	ea 5b       	subi	r30, 0xBA	; 186
 8bc:	ff 4f       	sbci	r31, 0xFF	; 255
 8be:	a8 c0       	rjmp	.+336    	; 0xa10 <__tablejump2__>
		case start:
			state = OFF;
 8c0:	81 e0       	ldi	r24, 0x01	; 1
 8c2:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <state>
			break;
		case OFF:
			if (buttonToggle()) {
 8c6:	62 c0       	rjmp	.+196    	; 0x98c <tick+0xe4>
 8c8:	d9 df       	rcall	.-78     	; 0x87c <buttonToggle>
 8ca:	88 23       	and	r24, r24
 8cc:	21 f0       	breq	.+8      	; 0x8d6 <tick+0x2e>
				state = ON;
 8ce:	82 e0       	ldi	r24, 0x02	; 2
 8d0:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <state>
 8d4:	5d c0       	rjmp	.+186    	; 0x990 <tick+0xe8>
			}
			else {
				state = OFF;
 8d6:	81 e0       	ldi	r24, 0x01	; 1
 8d8:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <state>
			}
			break;
		case ON:
			if (buttonToggle()) {
 8dc:	57 c0       	rjmp	.+174    	; 0x98c <tick+0xe4>
 8de:	ce df       	rcall	.-100    	; 0x87c <buttonToggle>
 8e0:	88 23       	and	r24, r24
 8e2:	21 f0       	breq	.+8      	; 0x8ec <tick+0x44>
				state = FO;
 8e4:	83 e0       	ldi	r24, 0x03	; 3
 8e6:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <state>
 8ea:	54 c0       	rjmp	.+168    	; 0x994 <tick+0xec>
			}
			else {
				state = ON;
 8ec:	82 e0       	ldi	r24, 0x02	; 2
 8ee:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <state>
			}
			break;
		case FO:
		if (buttonToggle()) {
 8f2:	4e c0       	rjmp	.+156    	; 0x990 <tick+0xe8>
 8f4:	c3 df       	rcall	.-122    	; 0x87c <buttonToggle>
 8f6:	88 23       	and	r24, r24
 8f8:	21 f0       	breq	.+8      	; 0x902 <tick+0x5a>
			state = LC;
 8fa:	84 e0       	ldi	r24, 0x04	; 4
 8fc:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <state>
 900:	4b c0       	rjmp	.+150    	; 0x998 <tick+0xf0>
		}
		else {
			state = FO;
 902:	83 e0       	ldi	r24, 0x03	; 3
 904:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <state>
		}
		break;
		case LC:
			if (buttonToggle()) {
 908:	45 c0       	rjmp	.+138    	; 0x994 <tick+0xec>
 90a:	b8 df       	rcall	.-144    	; 0x87c <buttonToggle>
 90c:	88 23       	and	r24, r24
 90e:	21 f0       	breq	.+8      	; 0x918 <tick+0x70>
				state = CC;
 910:	85 e0       	ldi	r24, 0x05	; 5
 912:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <state>
			}
			else {
				state = LC;
 916:	42 c0       	rjmp	.+132    	; 0x99c <tick+0xf4>
 918:	84 e0       	ldi	r24, 0x04	; 4
 91a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <state>
			}
		break;
		case CC:
			if (buttonToggle()) {
 91e:	3c c0       	rjmp	.+120    	; 0x998 <tick+0xf0>
 920:	ad df       	rcall	.-166    	; 0x87c <buttonToggle>
 922:	88 23       	and	r24, r24
 924:	21 f0       	breq	.+8      	; 0x92e <tick+0x86>
				state = LE;
 926:	86 e0       	ldi	r24, 0x06	; 6
 928:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <state>
			}
			else {
				state = CC;
 92c:	39 c0       	rjmp	.+114    	; 0x9a0 <tick+0xf8>
 92e:	85 e0       	ldi	r24, 0x05	; 5
 930:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <state>
		}
		break;
		case LE:
			if (buttonToggle()) {
 934:	33 c0       	rjmp	.+102    	; 0x99c <tick+0xf4>
 936:	a2 df       	rcall	.-188    	; 0x87c <buttonToggle>
 938:	88 23       	and	r24, r24
 93a:	21 f0       	breq	.+8      	; 0x944 <tick+0x9c>
				state = RF;
 93c:	87 e0       	ldi	r24, 0x07	; 7
 93e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <state>
			}
			else {
				state = LE;
 942:	30 c0       	rjmp	.+96     	; 0x9a4 <tick+0xfc>
 944:	86 e0       	ldi	r24, 0x06	; 6
 946:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <state>
			}
		break;
		case RF:
			if (buttonToggle()) {
 94a:	2a c0       	rjmp	.+84     	; 0x9a0 <tick+0xf8>
 94c:	97 df       	rcall	.-210    	; 0x87c <buttonToggle>
 94e:	88 23       	and	r24, r24
 950:	21 f0       	breq	.+8      	; 0x95a <tick+0xb2>
				state = RR;
 952:	88 e0       	ldi	r24, 0x08	; 8
 954:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <state>
			}
			else {
				state = RF;
 958:	27 c0       	rjmp	.+78     	; 0x9a8 <tick+0x100>
 95a:	87 e0       	ldi	r24, 0x07	; 7
 95c:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <state>
			}
		break;
		case RR:
			if (buttonToggle()) {
 960:	21 c0       	rjmp	.+66     	; 0x9a4 <tick+0xfc>
 962:	8c df       	rcall	.-232    	; 0x87c <buttonToggle>
 964:	88 23       	and	r24, r24
 966:	21 f0       	breq	.+8      	; 0x970 <tick+0xc8>
				state = OFF;
 968:	81 e0       	ldi	r24, 0x01	; 1
 96a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <state>
 96e:	0e c0       	rjmp	.+28     	; 0x98c <tick+0xe4>
			}
			else {
				state = RR;
 970:	88 e0       	ldi	r24, 0x08	; 8
 972:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <state>
 976:	18 c0       	rjmp	.+48     	; 0x9a8 <tick+0x100>
			}
			break;
	}
	switch (state) { //ACTIONS
 978:	8e 2f       	mov	r24, r30
 97a:	90 e0       	ldi	r25, 0x00	; 0
 97c:	fc 01       	movw	r30, r24
 97e:	31 97       	sbiw	r30, 0x01	; 1
 980:	e8 30       	cpi	r30, 0x08	; 8
 982:	f1 05       	cpc	r31, r1
 984:	90 f4       	brcc	.+36     	; 0x9aa <tick+0x102>
		case OFF:
			turnEverythingOff();
 986:	e1 5b       	subi	r30, 0xB1	; 177
			break;
		case ON:
			turnEverythingOn();
 988:	ff 4f       	sbci	r31, 0xFF	; 255
			break;
 98a:	42 c0       	rjmp	.+132    	; 0xa10 <__tablejump2__>
		case FO:
			flickerOn();
 98c:	1f dc       	rcall	.-1986   	; 0x1cc <turnEverythingOff>
 98e:	0d c0       	rjmp	.+26     	; 0x9aa <tick+0x102>
			break;
 990:	3e dc       	rcall	.-1924   	; 0x20e <turnEverythingOn>
		case LC:
			layerCascade();
 992:	0b c0       	rjmp	.+22     	; 0x9aa <tick+0x102>
 994:	5d dc       	rcall	.-1862   	; 0x250 <flickerOn>
			break;
 996:	09 c0       	rjmp	.+18     	; 0x9aa <tick+0x102>
		case CC:
			columnCascade();
 998:	7b dc       	rcall	.-1802   	; 0x290 <layerCascade>
 99a:	07 c0       	rjmp	.+14     	; 0x9aa <tick+0x102>
			break;
 99c:	f6 dc       	rcall	.-1556   	; 0x38a <columnCascade>
		case LE:
			layerExtend();
 99e:	05 c0       	rjmp	.+10     	; 0x9aa <tick+0x102>
 9a0:	71 dd       	rcall	.-1310   	; 0x484 <layerExtend>
			break;
 9a2:	03 c0       	rjmp	.+6      	; 0x9aa <tick+0x102>
		case RF:
			randomFlicker();
 9a4:	ea dd       	rcall	.-1068   	; 0x57a <randomFlicker>
 9a6:	01 c0       	rjmp	.+2      	; 0x9aa <tick+0x102>
			break;
 9a8:	8c de       	rcall	.-744    	; 0x6c2 <randomRain>
		case RR:
			randomRain();
 9aa:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <layer>
			break;
	}
	PORTA = layer;
 9ae:	82 b9       	out	0x02, r24	; 2
 9b0:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <column12>
	PORTB = column12;
 9b4:	85 b9       	out	0x05, r24	; 5
 9b6:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <column34>
	PORTD = column34;
 9ba:	8b b9       	out	0x0b, r24	; 11
 9bc:	08 95       	ret

000009be <main>:
 9be:	8f ef       	ldi	r24, 0xFF	; 255
 9c0:	81 b9       	out	0x01, r24	; 1
}
int main(void) //LC, CC, LE, RF
{
	DDRA = 0xFF; PORTA = 0x00;
 9c2:	12 b8       	out	0x02, r1	; 2
	DDRC = 0x00; PORTC = 0xFF;
 9c4:	17 b8       	out	0x07, r1	; 7
 9c6:	88 b9       	out	0x08, r24	; 8
	DDRB = 0xFF; PORTB = 0x00;
 9c8:	84 b9       	out	0x04, r24	; 4
 9ca:	15 b8       	out	0x05, r1	; 5
	DDRD = 0xFF; PORTD = 0x00;
 9cc:	8a b9       	out	0x0a, r24	; 10
 9ce:	1b b8       	out	0x0b, r1	; 11
	FLO_state = FLO_start;
 9d0:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <FLO_state>
	LC_state = LC_start;
 9d4:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <LC_state>
	CC_state = CC_start;
 9d8:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <CC_state>
	LE_state = LE_start;
 9dc:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <LE_state>
	RF_state = RF_start;
 9e0:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <RF_state>
	RR_state = RR_start;
 9e4:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <RR_state>
	
	TimerSet(100);
 9e8:	64 e6       	ldi	r22, 0x64	; 100
 9ea:	70 e0       	ldi	r23, 0x00	; 0
 9ec:	80 e0       	ldi	r24, 0x00	; 0
 9ee:	90 e0       	ldi	r25, 0x00	; 0
 9f0:	dc db       	rcall	.-2120   	; 0x1aa <TimerSet>
	TimerOn();
 9f2:	7b db       	rcall	.-2314   	; 0xea <TimerOn>
 9f4:	c1 e0       	ldi	r28, 0x01	; 1

    while (1) 
    {
		button = (~PINC & 0x01);
 9f6:	86 b1       	in	r24, 0x06	; 6
 9f8:	8c 27       	eor	r24, r28
 9fa:	81 70       	andi	r24, 0x01	; 1
 9fc:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <button>
		tick();
 a00:	53 df       	rcall	.-346    	; 0x8a8 <tick>
 a02:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <TimerFlag>
		while(!TimerFlag);
 a06:	88 23       	and	r24, r24
 a08:	e1 f3       	breq	.-8      	; 0xa02 <main+0x44>
 a0a:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <TimerFlag>
		TimerFlag = 0;
 a0e:	f3 cf       	rjmp	.-26     	; 0x9f6 <main+0x38>

00000a10 <__tablejump2__>:
		
    }
 a10:	ee 0f       	add	r30, r30
 a12:	ff 1f       	adc	r31, r31
 a14:	00 24       	eor	r0, r0
 a16:	00 1c       	adc	r0, r0
 a18:	0b be       	out	0x3b, r0	; 59
 a1a:	07 90       	elpm	r0, Z+
 a1c:	f6 91       	elpm	r31, Z
 a1e:	e0 2d       	mov	r30, r0
 a20:	09 94       	ijmp

00000a22 <do_rand>:
 a22:	8f 92       	push	r8
 a24:	9f 92       	push	r9
 a26:	af 92       	push	r10
 a28:	bf 92       	push	r11
 a2a:	cf 92       	push	r12
 a2c:	df 92       	push	r13
 a2e:	ef 92       	push	r14
 a30:	ff 92       	push	r15
 a32:	cf 93       	push	r28
 a34:	df 93       	push	r29
 a36:	ec 01       	movw	r28, r24
 a38:	68 81       	ld	r22, Y
 a3a:	79 81       	ldd	r23, Y+1	; 0x01
 a3c:	8a 81       	ldd	r24, Y+2	; 0x02
 a3e:	9b 81       	ldd	r25, Y+3	; 0x03
 a40:	61 15       	cp	r22, r1
 a42:	71 05       	cpc	r23, r1
 a44:	81 05       	cpc	r24, r1
 a46:	91 05       	cpc	r25, r1
 a48:	21 f4       	brne	.+8      	; 0xa52 <do_rand+0x30>
 a4a:	64 e2       	ldi	r22, 0x24	; 36
 a4c:	79 ed       	ldi	r23, 0xD9	; 217
 a4e:	8b e5       	ldi	r24, 0x5B	; 91
 a50:	97 e0       	ldi	r25, 0x07	; 7
 a52:	2d e1       	ldi	r18, 0x1D	; 29
 a54:	33 ef       	ldi	r19, 0xF3	; 243
 a56:	41 e0       	ldi	r20, 0x01	; 1
 a58:	50 e0       	ldi	r21, 0x00	; 0
 a5a:	38 d0       	rcall	.+112    	; 0xacc <__divmodsi4>
 a5c:	49 01       	movw	r8, r18
 a5e:	5a 01       	movw	r10, r20
 a60:	9b 01       	movw	r18, r22
 a62:	ac 01       	movw	r20, r24
 a64:	a7 ea       	ldi	r26, 0xA7	; 167
 a66:	b1 e4       	ldi	r27, 0x41	; 65
 a68:	4d d0       	rcall	.+154    	; 0xb04 <__muluhisi3>
 a6a:	6b 01       	movw	r12, r22
 a6c:	7c 01       	movw	r14, r24
 a6e:	ac ee       	ldi	r26, 0xEC	; 236
 a70:	b4 ef       	ldi	r27, 0xF4	; 244
 a72:	a5 01       	movw	r20, r10
 a74:	94 01       	movw	r18, r8
 a76:	52 d0       	rcall	.+164    	; 0xb1c <__mulohisi3>
 a78:	dc 01       	movw	r26, r24
 a7a:	cb 01       	movw	r24, r22
 a7c:	8c 0d       	add	r24, r12
 a7e:	9d 1d       	adc	r25, r13
 a80:	ae 1d       	adc	r26, r14
 a82:	bf 1d       	adc	r27, r15
 a84:	b7 ff       	sbrs	r27, 7
 a86:	03 c0       	rjmp	.+6      	; 0xa8e <do_rand+0x6c>
 a88:	01 97       	sbiw	r24, 0x01	; 1
 a8a:	a1 09       	sbc	r26, r1
 a8c:	b0 48       	sbci	r27, 0x80	; 128
 a8e:	88 83       	st	Y, r24
 a90:	99 83       	std	Y+1, r25	; 0x01
 a92:	aa 83       	std	Y+2, r26	; 0x02
 a94:	bb 83       	std	Y+3, r27	; 0x03
 a96:	9f 77       	andi	r25, 0x7F	; 127
 a98:	df 91       	pop	r29
 a9a:	cf 91       	pop	r28
 a9c:	ff 90       	pop	r15
 a9e:	ef 90       	pop	r14
 aa0:	df 90       	pop	r13
 aa2:	cf 90       	pop	r12
 aa4:	bf 90       	pop	r11
 aa6:	af 90       	pop	r10
 aa8:	9f 90       	pop	r9
 aaa:	8f 90       	pop	r8
 aac:	08 95       	ret

00000aae <rand_r>:
 aae:	b9 cf       	rjmp	.-142    	; 0xa22 <do_rand>

00000ab0 <rand>:
 ab0:	80 e0       	ldi	r24, 0x00	; 0
 ab2:	91 e0       	ldi	r25, 0x01	; 1
 ab4:	b6 cf       	rjmp	.-148    	; 0xa22 <do_rand>

00000ab6 <srand>:
 ab6:	a0 e0       	ldi	r26, 0x00	; 0
 ab8:	b0 e0       	ldi	r27, 0x00	; 0
 aba:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 abe:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 ac2:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 ac6:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 aca:	08 95       	ret

00000acc <__divmodsi4>:
 acc:	05 2e       	mov	r0, r21
 ace:	97 fb       	bst	r25, 7
 ad0:	16 f4       	brtc	.+4      	; 0xad6 <__divmodsi4+0xa>
 ad2:	00 94       	com	r0
 ad4:	0f d0       	rcall	.+30     	; 0xaf4 <__negsi2>
 ad6:	57 fd       	sbrc	r21, 7
 ad8:	05 d0       	rcall	.+10     	; 0xae4 <__divmodsi4_neg2>
 ada:	24 d0       	rcall	.+72     	; 0xb24 <__udivmodsi4>
 adc:	07 fc       	sbrc	r0, 7
 ade:	02 d0       	rcall	.+4      	; 0xae4 <__divmodsi4_neg2>
 ae0:	46 f4       	brtc	.+16     	; 0xaf2 <__divmodsi4_exit>
 ae2:	08 c0       	rjmp	.+16     	; 0xaf4 <__negsi2>

00000ae4 <__divmodsi4_neg2>:
 ae4:	50 95       	com	r21
 ae6:	40 95       	com	r20
 ae8:	30 95       	com	r19
 aea:	21 95       	neg	r18
 aec:	3f 4f       	sbci	r19, 0xFF	; 255
 aee:	4f 4f       	sbci	r20, 0xFF	; 255
 af0:	5f 4f       	sbci	r21, 0xFF	; 255

00000af2 <__divmodsi4_exit>:
 af2:	08 95       	ret

00000af4 <__negsi2>:
 af4:	90 95       	com	r25
 af6:	80 95       	com	r24
 af8:	70 95       	com	r23
 afa:	61 95       	neg	r22
 afc:	7f 4f       	sbci	r23, 0xFF	; 255
 afe:	8f 4f       	sbci	r24, 0xFF	; 255
 b00:	9f 4f       	sbci	r25, 0xFF	; 255
 b02:	08 95       	ret

00000b04 <__muluhisi3>:
 b04:	31 d0       	rcall	.+98     	; 0xb68 <__umulhisi3>
 b06:	a5 9f       	mul	r26, r21
 b08:	90 0d       	add	r25, r0
 b0a:	b4 9f       	mul	r27, r20
 b0c:	90 0d       	add	r25, r0
 b0e:	a4 9f       	mul	r26, r20
 b10:	80 0d       	add	r24, r0
 b12:	91 1d       	adc	r25, r1
 b14:	11 24       	eor	r1, r1
 b16:	08 95       	ret

00000b18 <__mulshisi3>:
 b18:	b7 ff       	sbrs	r27, 7
 b1a:	f4 cf       	rjmp	.-24     	; 0xb04 <__muluhisi3>

00000b1c <__mulohisi3>:
 b1c:	f3 df       	rcall	.-26     	; 0xb04 <__muluhisi3>
 b1e:	82 1b       	sub	r24, r18
 b20:	93 0b       	sbc	r25, r19
 b22:	08 95       	ret

00000b24 <__udivmodsi4>:
 b24:	a1 e2       	ldi	r26, 0x21	; 33
 b26:	1a 2e       	mov	r1, r26
 b28:	aa 1b       	sub	r26, r26
 b2a:	bb 1b       	sub	r27, r27
 b2c:	fd 01       	movw	r30, r26
 b2e:	0d c0       	rjmp	.+26     	; 0xb4a <__udivmodsi4_ep>

00000b30 <__udivmodsi4_loop>:
 b30:	aa 1f       	adc	r26, r26
 b32:	bb 1f       	adc	r27, r27
 b34:	ee 1f       	adc	r30, r30
 b36:	ff 1f       	adc	r31, r31
 b38:	a2 17       	cp	r26, r18
 b3a:	b3 07       	cpc	r27, r19
 b3c:	e4 07       	cpc	r30, r20
 b3e:	f5 07       	cpc	r31, r21
 b40:	20 f0       	brcs	.+8      	; 0xb4a <__udivmodsi4_ep>
 b42:	a2 1b       	sub	r26, r18
 b44:	b3 0b       	sbc	r27, r19
 b46:	e4 0b       	sbc	r30, r20
 b48:	f5 0b       	sbc	r31, r21

00000b4a <__udivmodsi4_ep>:
 b4a:	66 1f       	adc	r22, r22
 b4c:	77 1f       	adc	r23, r23
 b4e:	88 1f       	adc	r24, r24
 b50:	99 1f       	adc	r25, r25
 b52:	1a 94       	dec	r1
 b54:	69 f7       	brne	.-38     	; 0xb30 <__udivmodsi4_loop>
 b56:	60 95       	com	r22
 b58:	70 95       	com	r23
 b5a:	80 95       	com	r24
 b5c:	90 95       	com	r25
 b5e:	9b 01       	movw	r18, r22
 b60:	ac 01       	movw	r20, r24
 b62:	bd 01       	movw	r22, r26
 b64:	cf 01       	movw	r24, r30
 b66:	08 95       	ret

00000b68 <__umulhisi3>:
 b68:	a2 9f       	mul	r26, r18
 b6a:	b0 01       	movw	r22, r0
 b6c:	b3 9f       	mul	r27, r19
 b6e:	c0 01       	movw	r24, r0
 b70:	a3 9f       	mul	r26, r19
 b72:	70 0d       	add	r23, r0
 b74:	81 1d       	adc	r24, r1
 b76:	11 24       	eor	r1, r1
 b78:	91 1d       	adc	r25, r1
 b7a:	b2 9f       	mul	r27, r18
 b7c:	70 0d       	add	r23, r0
 b7e:	81 1d       	adc	r24, r1
 b80:	11 24       	eor	r1, r1
 b82:	91 1d       	adc	r25, r1
 b84:	08 95       	ret

00000b86 <_exit>:
 b86:	f8 94       	cli

00000b88 <__stop_program>:
 b88:	ff cf       	rjmp	.-2      	; 0xb88 <__stop_program>
