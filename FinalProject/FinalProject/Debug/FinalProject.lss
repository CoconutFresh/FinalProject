
FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000980  00000a14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000980  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  0080010a  0080010a  00000a1e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a1e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a50  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fbd  00000000  00000000  00000b30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a0e  00000000  00000000  00001aed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000807  00000000  00000000  000024fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000150  00000000  00000000  00002d04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000654  00000000  00000000  00002e54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005fc  00000000  00000000  000034a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00003aa4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	54 c0       	rjmp	.+168    	; 0xaa <__ctors_end>
   2:	00 00       	nop
   4:	6f c0       	rjmp	.+222    	; 0xe4 <__bad_interrupt>
   6:	00 00       	nop
   8:	6d c0       	rjmp	.+218    	; 0xe4 <__bad_interrupt>
   a:	00 00       	nop
   c:	6b c0       	rjmp	.+214    	; 0xe4 <__bad_interrupt>
   e:	00 00       	nop
  10:	69 c0       	rjmp	.+210    	; 0xe4 <__bad_interrupt>
  12:	00 00       	nop
  14:	67 c0       	rjmp	.+206    	; 0xe4 <__bad_interrupt>
  16:	00 00       	nop
  18:	65 c0       	rjmp	.+202    	; 0xe4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	63 c0       	rjmp	.+198    	; 0xe4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	61 c0       	rjmp	.+194    	; 0xe4 <__bad_interrupt>
  22:	00 00       	nop
  24:	5f c0       	rjmp	.+190    	; 0xe4 <__bad_interrupt>
  26:	00 00       	nop
  28:	5d c0       	rjmp	.+186    	; 0xe4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5b c0       	rjmp	.+182    	; 0xe4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	59 c0       	rjmp	.+178    	; 0xe4 <__bad_interrupt>
  32:	00 00       	nop
  34:	7c c0       	rjmp	.+248    	; 0x12e <__vector_13>
  36:	00 00       	nop
  38:	55 c0       	rjmp	.+170    	; 0xe4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	53 c0       	rjmp	.+166    	; 0xe4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	51 c0       	rjmp	.+162    	; 0xe4 <__bad_interrupt>
  42:	00 00       	nop
  44:	4f c0       	rjmp	.+158    	; 0xe4 <__bad_interrupt>
  46:	00 00       	nop
  48:	4d c0       	rjmp	.+154    	; 0xe4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4b c0       	rjmp	.+150    	; 0xe4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	49 c0       	rjmp	.+146    	; 0xe4 <__bad_interrupt>
  52:	00 00       	nop
  54:	47 c0       	rjmp	.+142    	; 0xe4 <__bad_interrupt>
  56:	00 00       	nop
  58:	45 c0       	rjmp	.+138    	; 0xe4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	43 c0       	rjmp	.+134    	; 0xe4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	41 c0       	rjmp	.+130    	; 0xe4 <__bad_interrupt>
  62:	00 00       	nop
  64:	3f c0       	rjmp	.+126    	; 0xe4 <__bad_interrupt>
  66:	00 00       	nop
  68:	3d c0       	rjmp	.+122    	; 0xe4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3b c0       	rjmp	.+118    	; 0xe4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	39 c0       	rjmp	.+114    	; 0xe4 <__bad_interrupt>
  72:	00 00       	nop
  74:	37 c0       	rjmp	.+110    	; 0xe4 <__bad_interrupt>
  76:	00 00       	nop
  78:	35 c0       	rjmp	.+106    	; 0xe4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	33 c0       	rjmp	.+102    	; 0xe4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	31 c0       	rjmp	.+98     	; 0xe4 <__bad_interrupt>
  82:	00 00       	nop
  84:	2f c0       	rjmp	.+94     	; 0xe4 <__bad_interrupt>
  86:	00 00       	nop
  88:	2d c0       	rjmp	.+90     	; 0xe4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	25 03       	mulsu	r18, r21
  8e:	29 03       	fmul	r18, r17
  90:	34 03       	mulsu	r19, r20
  92:	3f 03       	fmul	r19, r23
  94:	4a 03       	fmul	r20, r18
  96:	55 03       	mulsu	r21, r21
  98:	60 03       	mulsu	r22, r16
  9a:	6b 03       	fmul	r22, r19
  9c:	80 03       	fmuls	r16, r16
  9e:	82 03       	fmuls	r16, r18
  a0:	84 03       	fmuls	r16, r20
  a2:	86 03       	fmuls	r16, r22
  a4:	88 03       	fmulsu	r16, r16
  a6:	8a 03       	fmulsu	r16, r18
  a8:	8c 03       	fmulsu	r16, r20

000000aa <__ctors_end>:
  aa:	11 24       	eor	r1, r1
  ac:	1f be       	out	0x3f, r1	; 63
  ae:	cf ef       	ldi	r28, 0xFF	; 255
  b0:	d0 e4       	ldi	r29, 0x40	; 64
  b2:	de bf       	out	0x3e, r29	; 62
  b4:	cd bf       	out	0x3d, r28	; 61

000000b6 <__do_copy_data>:
  b6:	11 e0       	ldi	r17, 0x01	; 1
  b8:	a0 e0       	ldi	r26, 0x00	; 0
  ba:	b1 e0       	ldi	r27, 0x01	; 1
  bc:	e0 e8       	ldi	r30, 0x80	; 128
  be:	f9 e0       	ldi	r31, 0x09	; 9
  c0:	00 e0       	ldi	r16, 0x00	; 0
  c2:	0b bf       	out	0x3b, r16	; 59
  c4:	02 c0       	rjmp	.+4      	; 0xca <__do_copy_data+0x14>
  c6:	07 90       	elpm	r0, Z+
  c8:	0d 92       	st	X+, r0
  ca:	aa 30       	cpi	r26, 0x0A	; 10
  cc:	b1 07       	cpc	r27, r17
  ce:	d9 f7       	brne	.-10     	; 0xc6 <__do_copy_data+0x10>

000000d0 <__do_clear_bss>:
  d0:	21 e0       	ldi	r18, 0x01	; 1
  d2:	aa e0       	ldi	r26, 0x0A	; 10
  d4:	b1 e0       	ldi	r27, 0x01	; 1
  d6:	01 c0       	rjmp	.+2      	; 0xda <.do_clear_bss_start>

000000d8 <.do_clear_bss_loop>:
  d8:	1d 92       	st	X+, r1

000000da <.do_clear_bss_start>:
  da:	ab 31       	cpi	r26, 0x1B	; 27
  dc:	b2 07       	cpc	r27, r18
  de:	e1 f7       	brne	.-8      	; 0xd8 <.do_clear_bss_loop>
  e0:	26 d3       	rcall	.+1612   	; 0x72e <main>
  e2:	4c c4       	rjmp	.+2200   	; 0x97c <_exit>

000000e4 <__bad_interrupt>:
  e4:	8d cf       	rjmp	.-230    	; 0x0 <__vectors>

000000e6 <TimerOn>:
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) { //x = unsigned char, k = position, b = HIGH/LOW
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
}
unsigned char GetBit(unsigned char x, unsigned char k) {
	return ((x & (0x01 << k)) != 0);
}
  e6:	8b e0       	ldi	r24, 0x0B	; 11
  e8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  ec:	8d e7       	ldi	r24, 0x7D	; 125
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  f4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
  fe:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 102:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 106:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_avr_timer_M>
 10a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_avr_timer_M+0x1>
 10e:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_avr_timer_M+0x2>
 112:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_avr_timer_M+0x3>
 116:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 11a:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 11e:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <__data_end+0x2>
 122:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <__data_end+0x3>
 126:	8f b7       	in	r24, 0x3f	; 63
 128:	80 68       	ori	r24, 0x80	; 128
 12a:	8f bf       	out	0x3f, r24	; 63
 12c:	08 95       	ret

0000012e <__vector_13>:
 12e:	1f 92       	push	r1
 130:	0f 92       	push	r0
 132:	0f b6       	in	r0, 0x3f	; 63
 134:	0f 92       	push	r0
 136:	11 24       	eor	r1, r1
 138:	8f 93       	push	r24
 13a:	9f 93       	push	r25
 13c:	af 93       	push	r26
 13e:	bf 93       	push	r27
 140:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 144:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 148:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <__data_end+0x2>
 14c:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <__data_end+0x3>
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	a1 09       	sbc	r26, r1
 154:	b1 09       	sbc	r27, r1
 156:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 15a:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 15e:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <__data_end+0x2>
 162:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <__data_end+0x3>
 166:	89 2b       	or	r24, r25
 168:	8a 2b       	or	r24, r26
 16a:	8b 2b       	or	r24, r27
 16c:	99 f4       	brne	.+38     	; 0x194 <__vector_13+0x66>
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <TimerFlag>
 174:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_avr_timer_M>
 178:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_avr_timer_M+0x1>
 17c:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_avr_timer_M+0x2>
 180:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_avr_timer_M+0x3>
 184:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 188:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 18c:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <__data_end+0x2>
 190:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <__data_end+0x3>
 194:	bf 91       	pop	r27
 196:	af 91       	pop	r26
 198:	9f 91       	pop	r25
 19a:	8f 91       	pop	r24
 19c:	0f 90       	pop	r0
 19e:	0f be       	out	0x3f, r0	; 63
 1a0:	0f 90       	pop	r0
 1a2:	1f 90       	pop	r1
 1a4:	18 95       	reti

000001a6 <TimerSet>:
 1a6:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <_avr_timer_M>
 1aa:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <_avr_timer_M+0x1>
 1ae:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_avr_timer_M+0x2>
 1b2:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_avr_timer_M+0x3>
 1b6:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <__data_end>
 1ba:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <__data_end+0x1>
 1be:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end+0x2>
 1c2:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x3>
 1c6:	08 95       	ret

000001c8 <turnEverythingOff>:


void turnEverythingOff() { //Turns all LEDs off
 1c8:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <column12>
 1cc:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <column34>
 1d0:	20 e0       	ldi	r18, 0x00	; 0
 1d2:	30 e0       	ldi	r19, 0x00	; 0
}


// Bit-access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) { //x = unsigned char, k = position, b = HIGH/LOW
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
 1d4:	61 e0       	ldi	r22, 0x01	; 1
 1d6:	70 e0       	ldi	r23, 0x00	; 0
 1d8:	cb 01       	movw	r24, r22
 1da:	02 2e       	mov	r0, r18
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <turnEverythingOff+0x1a>
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	0a 94       	dec	r0
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <turnEverythingOff+0x16>
 1e6:	80 95       	com	r24
 1e8:	58 23       	and	r21, r24
 1ea:	48 23       	and	r20, r24
 1ec:	2f 5f       	subi	r18, 0xFF	; 255
 1ee:	3f 4f       	sbci	r19, 0xFF	; 255
	return ((x & (0x01 << k)) != 0);
}


void turnEverythingOff() { //Turns all LEDs off
	for(unsigned char i = 0; i < 8; i++) {
 1f0:	28 30       	cpi	r18, 0x08	; 8
 1f2:	31 05       	cpc	r19, r1
 1f4:	89 f7       	brne	.-30     	; 0x1d8 <turnEverythingOff+0x10>
 1f6:	50 93 13 01 	sts	0x0113, r21	; 0x800113 <column12>
 1fa:	40 93 12 01 	sts	0x0112, r20	; 0x800112 <column34>
}


// Bit-access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) { //x = unsigned char, k = position, b = HIGH/LOW
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
 1fe:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <layer>
 202:	80 7f       	andi	r24, 0xF0	; 240
 204:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <layer>
 208:	08 95       	ret

0000020a <turnEverythingOn>:
	//layer = 0x00;
	//column12 = 0x00;
	//column34 = 0x00;
}

void turnEverythingOn() { //Turns all LEDs on
 20a:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <column12>
 20e:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <column34>
 212:	20 e0       	ldi	r18, 0x00	; 0
 214:	30 e0       	ldi	r19, 0x00	; 0
}


// Bit-access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) { //x = unsigned char, k = position, b = HIGH/LOW
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
 216:	61 e0       	ldi	r22, 0x01	; 1
 218:	70 e0       	ldi	r23, 0x00	; 0
 21a:	cb 01       	movw	r24, r22
 21c:	02 2e       	mov	r0, r18
 21e:	02 c0       	rjmp	.+4      	; 0x224 <turnEverythingOn+0x1a>
 220:	88 0f       	add	r24, r24
 222:	99 1f       	adc	r25, r25
 224:	0a 94       	dec	r0
 226:	e2 f7       	brpl	.-8      	; 0x220 <turnEverythingOn+0x16>
 228:	80 95       	com	r24
 22a:	58 23       	and	r21, r24
 22c:	48 23       	and	r20, r24
 22e:	2f 5f       	subi	r18, 0xFF	; 255
 230:	3f 4f       	sbci	r19, 0xFF	; 255
	//column12 = 0x00;
	//column34 = 0x00;
}

void turnEverythingOn() { //Turns all LEDs on
	for(unsigned char i = 0; i < 8; i++) {
 232:	28 30       	cpi	r18, 0x08	; 8
 234:	31 05       	cpc	r19, r1
 236:	89 f7       	brne	.-30     	; 0x21a <turnEverythingOn+0x10>
 238:	50 93 13 01 	sts	0x0113, r21	; 0x800113 <column12>
 23c:	40 93 12 01 	sts	0x0112, r20	; 0x800112 <column34>
}


// Bit-access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) { //x = unsigned char, k = position, b = HIGH/LOW
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
 240:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <layer>
 244:	8f 60       	ori	r24, 0x0F	; 15
 246:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <layer>
 24a:	08 95       	ret

0000024c <flickerOn>:
	//column34 = 0x00;
}

enum FLO_states{FLO_start, FLO_ON, FLO_OFF}FLO_state;
void flickerOn() {
	switch (FLO_state) { //	TRANSITION
 24c:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <FLO_state>
 250:	81 30       	cpi	r24, 0x01	; 1
 252:	41 f0       	breq	.+16     	; 0x264 <flickerOn+0x18>
 254:	18 f0       	brcs	.+6      	; 0x25c <flickerOn+0x10>
 256:	82 30       	cpi	r24, 0x02	; 2
 258:	49 f0       	breq	.+18     	; 0x26c <flickerOn+0x20>
 25a:	0c c0       	rjmp	.+24     	; 0x274 <flickerOn+0x28>
		case FLO_start:
			FLO_state = FLO_ON;
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <FLO_state>
		break;
 262:	0d c0       	rjmp	.+26     	; 0x27e <flickerOn+0x32>
		case FLO_ON:
			FLO_state = FLO_OFF;
 264:	82 e0       	ldi	r24, 0x02	; 2
 266:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <FLO_state>
 26a:	0b c0       	rjmp	.+22     	; 0x282 <flickerOn+0x36>
		break;
		case FLO_OFF:
			FLO_state = FLO_ON;
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <FLO_state>
		break;
 272:	05 c0       	rjmp	.+10     	; 0x27e <flickerOn+0x32>
	}
	switch (FLO_state) { //ACTIONS
 274:	81 30       	cpi	r24, 0x01	; 1
 276:	19 f0       	breq	.+6      	; 0x27e <flickerOn+0x32>
 278:	82 30       	cpi	r24, 0x02	; 2
 27a:	21 f4       	brne	.+8      	; 0x284 <flickerOn+0x38>
 27c:	02 c0       	rjmp	.+4      	; 0x282 <flickerOn+0x36>
		case FLO_ON:
			turnEverythingOn();
 27e:	c5 cf       	rjmp	.-118    	; 0x20a <turnEverythingOn>
			break;
		case FLO_OFF:
			turnEverythingOff();
 280:	08 95       	ret
 282:	a2 cf       	rjmp	.-188    	; 0x1c8 <turnEverythingOff>
 284:	08 95       	ret

00000286 <layerCascade>:


enum LC_states{LC_start, LC_layer1, LC_layer2, LC_layer3, LC_layer4}LC_state;
void layerCascade(LC_state) {
	
	switch (LC_state) { //transitions
 286:	82 30       	cpi	r24, 0x02	; 2
 288:	91 05       	cpc	r25, r1
 28a:	e9 f0       	breq	.+58     	; 0x2c6 <layerCascade+0x40>
 28c:	34 f4       	brge	.+12     	; 0x29a <layerCascade+0x14>
 28e:	00 97       	sbiw	r24, 0x00	; 0
 290:	59 f0       	breq	.+22     	; 0x2a8 <layerCascade+0x22>
 292:	81 30       	cpi	r24, 0x01	; 1
 294:	91 05       	cpc	r25, r1
 296:	51 f0       	breq	.+20     	; 0x2ac <layerCascade+0x26>
 298:	3d c0       	rjmp	.+122    	; 0x314 <layerCascade+0x8e>
 29a:	83 30       	cpi	r24, 0x03	; 3
 29c:	91 05       	cpc	r25, r1
 29e:	01 f1       	breq	.+64     	; 0x2e0 <layerCascade+0x5a>
 2a0:	84 30       	cpi	r24, 0x04	; 4
 2a2:	91 05       	cpc	r25, r1
 2a4:	51 f1       	breq	.+84     	; 0x2fa <layerCascade+0x74>
 2a6:	36 c0       	rjmp	.+108    	; 0x314 <layerCascade+0x8e>
		
		case LC_start: 
			turnEverythingOff();
 2a8:	8f df       	rcall	.-226    	; 0x1c8 <turnEverythingOff>
			
			LC_state = LC_layer1;
			break;
 2aa:	41 c0       	rjmp	.+130    	; 0x32e <layerCascade+0xa8>
		case LC_layer1:
			if (count == timing) {
 2ac:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <count>
 2b0:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <timing>
 2b4:	89 13       	cpse	r24, r25
 2b6:	03 c0       	rjmp	.+6      	; 0x2be <layerCascade+0x38>
				LC_state = LC_layer2;
				count = 0;
 2b8:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <count>
 2bc:	3f c0       	rjmp	.+126    	; 0x33c <layerCascade+0xb6>
			}
			else {
				LC_state = LC_layer1;
				count++;
 2be:	8f 5f       	subi	r24, 0xFF	; 255
 2c0:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <count>
 2c4:	34 c0       	rjmp	.+104    	; 0x32e <layerCascade+0xa8>
			}
			break;
		case LC_layer2:
			if (count == timing) {
 2c6:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <count>
 2ca:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <timing>
 2ce:	89 13       	cpse	r24, r25
 2d0:	03 c0       	rjmp	.+6      	; 0x2d8 <layerCascade+0x52>
				LC_state = LC_layer3;
				count = 0;
 2d2:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <count>
 2d6:	39 c0       	rjmp	.+114    	; 0x34a <layerCascade+0xc4>
			}
			else {
				LC_state = LC_layer2;
				count++;
 2d8:	8f 5f       	subi	r24, 0xFF	; 255
 2da:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <count>
 2de:	2e c0       	rjmp	.+92     	; 0x33c <layerCascade+0xb6>
			}
			break;
		case LC_layer3:
			if (count == timing) {
 2e0:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <count>
 2e4:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <timing>
 2e8:	89 13       	cpse	r24, r25
 2ea:	03 c0       	rjmp	.+6      	; 0x2f2 <layerCascade+0x6c>
				LC_state = LC_layer4;
				count = 0;
 2ec:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <count>
 2f0:	33 c0       	rjmp	.+102    	; 0x358 <layerCascade+0xd2>
			}
			else {
				LC_state = LC_layer3;
				count++;
 2f2:	8f 5f       	subi	r24, 0xFF	; 255
 2f4:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <count>
 2f8:	28 c0       	rjmp	.+80     	; 0x34a <layerCascade+0xc4>
			}
			break;
		case LC_layer4:
			if (count == timing) {
 2fa:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <count>
 2fe:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <timing>
 302:	89 13       	cpse	r24, r25
 304:	03 c0       	rjmp	.+6      	; 0x30c <layerCascade+0x86>
				LC_state = LC_layer1;
				count = 0;
 306:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <count>
 30a:	11 c0       	rjmp	.+34     	; 0x32e <layerCascade+0xa8>
			}
			else {
				LC_state = LC_layer4;
				count++;
 30c:	8f 5f       	subi	r24, 0xFF	; 255
 30e:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <count>
 312:	22 c0       	rjmp	.+68     	; 0x358 <layerCascade+0xd2>
			}
			break;
	}
	switch (LC_state) { //ACTIONS
 314:	82 30       	cpi	r24, 0x02	; 2
 316:	91 05       	cpc	r25, r1
 318:	89 f0       	breq	.+34     	; 0x33c <layerCascade+0xb6>
 31a:	1c f4       	brge	.+6      	; 0x322 <layerCascade+0x9c>
 31c:	01 97       	sbiw	r24, 0x01	; 1
 31e:	11 f5       	brne	.+68     	; 0x364 <layerCascade+0xde>
 320:	06 c0       	rjmp	.+12     	; 0x32e <layerCascade+0xa8>
 322:	83 30       	cpi	r24, 0x03	; 3
 324:	91 05       	cpc	r25, r1
 326:	89 f0       	breq	.+34     	; 0x34a <layerCascade+0xc4>
 328:	04 97       	sbiw	r24, 0x04	; 4
 32a:	e1 f4       	brne	.+56     	; 0x364 <layerCascade+0xde>
 32c:	15 c0       	rjmp	.+42     	; 0x358 <layerCascade+0xd2>
		case LC_layer1:
			layer = SetBit(layer, 3, 0);
			//layer = layer & 0x07;
			layer = SetBit(layer, 0, 1);
 32e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <layer>
 332:	87 7f       	andi	r24, 0xF7	; 247
 334:	81 60       	ori	r24, 0x01	; 1
 336:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <layer>
			//layer = layer | 0x01;
			break;
 33a:	08 95       	ret
		case LC_layer2:
			layer = SetBit(layer, 0 , 0);
			//layer = layer & 0x0E;
			layer = SetBit(layer, 1, 1);
 33c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <layer>
 340:	8e 7f       	andi	r24, 0xFE	; 254
 342:	82 60       	ori	r24, 0x02	; 2
 344:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <layer>
			//layer = layer | 0x02;
			break;
 348:	08 95       	ret
		case LC_layer3:
			layer = SetBit(layer, 1 , 0);
			layer = SetBit(layer, 2, 1);
 34a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <layer>
 34e:	8d 7f       	andi	r24, 0xFD	; 253
 350:	84 60       	ori	r24, 0x04	; 4
 352:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <layer>
			break;
 356:	08 95       	ret
		case LC_layer4:
			layer = SetBit(layer, 2 , 0);
			layer = SetBit(layer, 3, 1);
 358:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <layer>
 35c:	8b 7f       	andi	r24, 0xFB	; 251
 35e:	88 60       	ori	r24, 0x08	; 8
 360:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <layer>
 364:	08 95       	ret

00000366 <columnCascade>:
}

enum CC_states{CC_start, CC_column1, CC_column2, CC_column3, CC_column4}CC_state;
void columnCascade() {
	
	switch (CC_state) { //TRANSITIONS
 366:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <CC_state>
 36a:	82 30       	cpi	r24, 0x02	; 2
 36c:	29 f1       	breq	.+74     	; 0x3b8 <columnCascade+0x52>
 36e:	28 f4       	brcc	.+10     	; 0x37a <columnCascade+0x14>
 370:	88 23       	and	r24, r24
 372:	41 f0       	breq	.+16     	; 0x384 <columnCascade+0x1e>
 374:	81 30       	cpi	r24, 0x01	; 1
 376:	81 f0       	breq	.+32     	; 0x398 <columnCascade+0x32>
 378:	4f c0       	rjmp	.+158    	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 37a:	83 30       	cpi	r24, 0x03	; 3
 37c:	69 f1       	breq	.+90     	; 0x3d8 <columnCascade+0x72>
 37e:	84 30       	cpi	r24, 0x04	; 4
 380:	d9 f1       	breq	.+118    	; 0x3f8 <columnCascade+0x92>
 382:	4a c0       	rjmp	.+148    	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
		case CC_start:
			turnEverythingOff();
 384:	21 df       	rcall	.-446    	; 0x1c8 <turnEverythingOff>
			count = 0;
 386:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <count>
			layer = 0x0F; //Turns on all positives
 38a:	8f e0       	ldi	r24, 0x0F	; 15
 38c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <layer>
			CC_state = CC_column1;
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <CC_state>
		break;
 396:	4b c0       	rjmp	.+150    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
		case (CC_column1):
			if (count == timing) {
 398:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <count>
 39c:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <timing>
 3a0:	89 13       	cpse	r24, r25
 3a2:	06 c0       	rjmp	.+12     	; 0x3b0 <columnCascade+0x4a>
				CC_state = CC_column2;
 3a4:	82 e0       	ldi	r24, 0x02	; 2
 3a6:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <CC_state>
				count = 0;
 3aa:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <count>
 3ae:	45 c0       	rjmp	.+138    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
			}
			else {
				CC_state = CC_column1;
				count++;
 3b0:	8f 5f       	subi	r24, 0xFF	; 255
 3b2:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <count>
 3b6:	3b c0       	rjmp	.+118    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
			}
		break;
		case (CC_column2):
			if (count == timing) {
 3b8:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <count>
 3bc:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <timing>
 3c0:	89 13       	cpse	r24, r25
 3c2:	06 c0       	rjmp	.+12     	; 0x3d0 <columnCascade+0x6a>
				CC_state = CC_column3;
 3c4:	83 e0       	ldi	r24, 0x03	; 3
 3c6:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <CC_state>
				count = 0;
 3ca:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <count>
 3ce:	3b c0       	rjmp	.+118    	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
			}
			else {
				CC_state = CC_column2;
				count++;
 3d0:	8f 5f       	subi	r24, 0xFF	; 255
 3d2:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <count>
 3d6:	31 c0       	rjmp	.+98     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
			}
		break;
		case (CC_column3):
			if (count == timing) {
 3d8:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <count>
 3dc:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <timing>
 3e0:	89 13       	cpse	r24, r25
 3e2:	06 c0       	rjmp	.+12     	; 0x3f0 <columnCascade+0x8a>
				CC_state = CC_column4;
 3e4:	84 e0       	ldi	r24, 0x04	; 4
 3e6:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <CC_state>
				count = 0;
 3ea:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <count>
 3ee:	31 c0       	rjmp	.+98     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
			}
			else {
				CC_state = CC_column3;
				count++;
 3f0:	8f 5f       	subi	r24, 0xFF	; 255
 3f2:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <count>
 3f6:	27 c0       	rjmp	.+78     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
			}
		break;
		case (CC_column4):
			if (count == timing) {
 3f8:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <count>
 3fc:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <timing>
 400:	89 13       	cpse	r24, r25
 402:	06 c0       	rjmp	.+12     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
				CC_state = CC_column1;
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <CC_state>
				count = 0;
 40a:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <count>
 40e:	0f c0       	rjmp	.+30     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
			}
			else {
				CC_state = CC_column4;
				count++;
 410:	8f 5f       	subi	r24, 0xFF	; 255
 412:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <count>
 416:	1d c0       	rjmp	.+58     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
			}
		break;
	}
	switch (CC_state) { //ACTION
 418:	82 30       	cpi	r24, 0x02	; 2
 41a:	79 f0       	breq	.+30     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 41c:	18 f4       	brcc	.+6      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 41e:	81 30       	cpi	r24, 0x01	; 1
 420:	e9 f4       	brne	.+58     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 422:	05 c0       	rjmp	.+10     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 424:	83 30       	cpi	r24, 0x03	; 3
 426:	79 f0       	breq	.+30     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 428:	84 30       	cpi	r24, 0x04	; 4
 42a:	c1 f4       	brne	.+48     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 42c:	12 c0       	rjmp	.+36     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
		case CC_column1:
			column12 = (0x00 & column12) | 0xF0;
 42e:	80 ef       	ldi	r24, 0xF0	; 240
 430:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <column12>
			column34 = (0x00 & column34);
 434:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <column34>
		break;
 438:	08 95       	ret
		case CC_column2:
			column12 = (0x00 & column12) | 0x0F;
 43a:	8f e0       	ldi	r24, 0x0F	; 15
 43c:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <column12>
			column34 = (0x00 & column34);
 440:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <column34>
		break;
 444:	08 95       	ret
		case CC_column3:
			column34 = (0x00 & column34) | 0xF0;
 446:	80 ef       	ldi	r24, 0xF0	; 240
 448:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <column34>
			column12 = (0x00 & column12);
 44c:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <column12>
		break;
 450:	08 95       	ret
		case CC_column4:
			column34 = (0x00 & column34) | 0x0F;
 452:	8f e0       	ldi	r24, 0x0F	; 15
 454:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <column34>
			column12 = (0x00 & column12);
 458:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <column12>
 45c:	08 95       	ret

0000045e <layerExtend>:
	}
}

enum LE_states{LE_start, LE_state1, LE_state2, LE_state3, LE_state4}LE_state;
void layerExtend(LE_state) {
	switch (LE_state) {
 45e:	82 30       	cpi	r24, 0x02	; 2
 460:	91 05       	cpc	r25, r1
 462:	f9 f0       	breq	.+62     	; 0x4a2 <layerExtend+0x44>
 464:	34 f4       	brge	.+12     	; 0x472 <layerExtend+0x14>
 466:	00 97       	sbiw	r24, 0x00	; 0
 468:	59 f0       	breq	.+22     	; 0x480 <layerExtend+0x22>
 46a:	81 30       	cpi	r24, 0x01	; 1
 46c:	91 05       	cpc	r25, r1
 46e:	61 f0       	breq	.+24     	; 0x488 <layerExtend+0x2a>
 470:	41 c0       	rjmp	.+130    	; 0x4f4 <layerExtend+0x96>
 472:	83 30       	cpi	r24, 0x03	; 3
 474:	91 05       	cpc	r25, r1
 476:	11 f1       	breq	.+68     	; 0x4bc <layerExtend+0x5e>
 478:	84 30       	cpi	r24, 0x04	; 4
 47a:	91 05       	cpc	r25, r1
 47c:	61 f1       	breq	.+88     	; 0x4d6 <layerExtend+0x78>
 47e:	3a c0       	rjmp	.+116    	; 0x4f4 <layerExtend+0x96>
		
		case LE_start:
			turnEverythingOff();
 480:	a3 de       	rcall	.-698    	; 0x1c8 <turnEverythingOff>
			count = 0;
 482:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <count>
			LE_state = LE_state1;
		break;
 486:	43 c0       	rjmp	.+134    	; 0x50e <layerExtend+0xb0>
		case LE_state1:
			if (count == timing) {
 488:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <count>
 48c:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <timing>
 490:	89 13       	cpse	r24, r25
 492:	03 c0       	rjmp	.+6      	; 0x49a <layerExtend+0x3c>
				LE_state = LE_state2;
				count = 0;
 494:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <count>
 498:	40 c0       	rjmp	.+128    	; 0x51a <layerExtend+0xbc>
			}
			else {
				LE_state = LE_state1;
				count++;
 49a:	8f 5f       	subi	r24, 0xFF	; 255
 49c:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <count>
 4a0:	36 c0       	rjmp	.+108    	; 0x50e <layerExtend+0xb0>
			}
		break;
		case LE_state2:
			if (count == timing) {
 4a2:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <count>
 4a6:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <timing>
 4aa:	89 13       	cpse	r24, r25
 4ac:	03 c0       	rjmp	.+6      	; 0x4b4 <layerExtend+0x56>
				LE_state = LE_state3;
				count = 0;
 4ae:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <count>
 4b2:	39 c0       	rjmp	.+114    	; 0x526 <layerExtend+0xc8>
			}
			else {
				LE_state = LE_state2;
				count++;
 4b4:	8f 5f       	subi	r24, 0xFF	; 255
 4b6:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <count>
 4ba:	2f c0       	rjmp	.+94     	; 0x51a <layerExtend+0xbc>
			}
		break;
		case LE_state3:
			if (count == timing) {
 4bc:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <count>
 4c0:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <timing>
 4c4:	89 13       	cpse	r24, r25
 4c6:	03 c0       	rjmp	.+6      	; 0x4ce <layerExtend+0x70>
				LE_state = LE_state4;
				count = 0;
 4c8:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <count>
 4cc:	32 c0       	rjmp	.+100    	; 0x532 <layerExtend+0xd4>
			}
			else {
				LE_state = LE_state3;
				count++;
 4ce:	8f 5f       	subi	r24, 0xFF	; 255
 4d0:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <count>
 4d4:	28 c0       	rjmp	.+80     	; 0x526 <layerExtend+0xc8>
			}
		break;
		case LE_state4:
			if (count == timing) {
 4d6:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <count>
 4da:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <timing>
 4de:	89 13       	cpse	r24, r25
 4e0:	05 c0       	rjmp	.+10     	; 0x4ec <layerExtend+0x8e>
				layer = 0x00; //resets
 4e2:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <layer>
				LE_state = LE_state1;
				count = 0;
 4e6:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <count>
 4ea:	11 c0       	rjmp	.+34     	; 0x50e <layerExtend+0xb0>
			}
			else {
				LE_state = LE_state4;
				count++;
 4ec:	8f 5f       	subi	r24, 0xFF	; 255
 4ee:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <count>
 4f2:	1f c0       	rjmp	.+62     	; 0x532 <layerExtend+0xd4>
			}
		break;
	}
	switch (LE_state) { //ACTION
 4f4:	82 30       	cpi	r24, 0x02	; 2
 4f6:	91 05       	cpc	r25, r1
 4f8:	81 f0       	breq	.+32     	; 0x51a <layerExtend+0xbc>
 4fa:	1c f4       	brge	.+6      	; 0x502 <layerExtend+0xa4>
 4fc:	01 97       	sbiw	r24, 0x01	; 1
 4fe:	f1 f4       	brne	.+60     	; 0x53c <layerExtend+0xde>
 500:	06 c0       	rjmp	.+12     	; 0x50e <layerExtend+0xb0>
 502:	83 30       	cpi	r24, 0x03	; 3
 504:	91 05       	cpc	r25, r1
 506:	79 f0       	breq	.+30     	; 0x526 <layerExtend+0xc8>
 508:	04 97       	sbiw	r24, 0x04	; 4
 50a:	c1 f4       	brne	.+48     	; 0x53c <layerExtend+0xde>
 50c:	12 c0       	rjmp	.+36     	; 0x532 <layerExtend+0xd4>
		case LE_state1:
			layer = SetBit(layer, 0, 1);
 50e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <layer>
 512:	81 60       	ori	r24, 0x01	; 1
 514:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <layer>
		break;
 518:	08 95       	ret
		case LE_state2: 
			layer = SetBit(layer, 1, 1);
 51a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <layer>
 51e:	82 60       	ori	r24, 0x02	; 2
 520:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <layer>
		break;
 524:	08 95       	ret
		case LE_state3:
			layer = SetBit(layer, 2, 1);
 526:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <layer>
 52a:	84 60       	ori	r24, 0x04	; 4
 52c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <layer>
		break;
 530:	08 95       	ret
		case LE_state4:
			layer = SetBit(layer, 3, 1);
 532:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <layer>
 536:	88 60       	ori	r24, 0x08	; 8
 538:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <layer>
 53c:	08 95       	ret

0000053e <randomFlicker>:

//void aroundEdgeDown() {
	//
//}
enum RF_states{RF_start, RF_lit, RF_reset}RF_state;
void randomFlicker() {
 53e:	cf 93       	push	r28
 540:	df 93       	push	r29
	count = 0;
 542:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <count>
	unsigned char randomLayer;
	unsigned char randomColumnMacro;
	unsigned char randomColumn;
	switch (RF_state) { //TRANSISTIONS
 546:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <RF_state>
 54a:	91 30       	cpi	r25, 0x01	; 1
 54c:	d1 f0       	breq	.+52     	; 0x582 <randomFlicker+0x44>
 54e:	18 f0       	brcs	.+6      	; 0x556 <randomFlicker+0x18>
 550:	92 30       	cpi	r25, 0x02	; 2
 552:	e9 f0       	breq	.+58     	; 0x58e <randomFlicker+0x50>
 554:	23 c0       	rjmp	.+70     	; 0x59c <randomFlicker+0x5e>
		case RF_start:
			turnEverythingOff();
 556:	38 de       	rcall	.-912    	; 0x1c8 <turnEverythingOff>
			randomLayer = random(0,3);
 558:	63 e0       	ldi	r22, 0x03	; 3
 55a:	70 e0       	ldi	r23, 0x00	; 0
 55c:	80 e0       	ldi	r24, 0x00	; 0
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	5c d1       	rcall	.+696    	; 0x81a <random>
 562:	d8 2f       	mov	r29, r24
			randomColumnMacro = random (0,1);
 564:	61 e0       	ldi	r22, 0x01	; 1
 566:	70 e0       	ldi	r23, 0x00	; 0
 568:	80 e0       	ldi	r24, 0x00	; 0
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	56 d1       	rcall	.+684    	; 0x81a <random>
 56e:	c8 2f       	mov	r28, r24
			randomColumn = random(0,7);
 570:	67 e0       	ldi	r22, 0x07	; 7
 572:	70 e0       	ldi	r23, 0x00	; 0
 574:	80 e0       	ldi	r24, 0x00	; 0
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	50 d1       	rcall	.+672    	; 0x81a <random>
			RF_state = RF_lit;
 57a:	91 e0       	ldi	r25, 0x01	; 1
 57c:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <RF_state>
		break;
 580:	12 c0       	rjmp	.+36     	; 0x5a6 <randomFlicker+0x68>
			if (count == 3) {
				RF_state = RF_reset;
				count = 0;
			}
			else {
				count++;
 582:	91 e0       	ldi	r25, 0x01	; 1
 584:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <count>
				RF_state = RF_lit;
 588:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <RF_state>
 58c:	0c c0       	rjmp	.+24     	; 0x5a6 <randomFlicker+0x68>
				randomColumn = random(0,7);
				RF_state = RF_lit;
				count = 0;
			}
			else {
				count++;
 58e:	81 e0       	ldi	r24, 0x01	; 1
 590:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <count>
				RF_state = RF_reset;
 594:	82 e0       	ldi	r24, 0x02	; 2
 596:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <RF_state>
 59a:	31 c0       	rjmp	.+98     	; 0x5fe <randomFlicker+0xc0>
			}
		break;
	}
	switch (RF_state) { //ACTIONS
 59c:	91 30       	cpi	r25, 0x01	; 1
 59e:	19 f0       	breq	.+6      	; 0x5a6 <randomFlicker+0x68>
 5a0:	92 30       	cpi	r25, 0x02	; 2
 5a2:	71 f5       	brne	.+92     	; 0x600 <randomFlicker+0xc2>
 5a4:	2c c0       	rjmp	.+88     	; 0x5fe <randomFlicker+0xc0>
		case RF_lit:
			layer = SetBit(layer, randomLayer, 1);
 5a6:	21 e0       	ldi	r18, 0x01	; 1
 5a8:	30 e0       	ldi	r19, 0x00	; 0
 5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <randomFlicker+0x72>
 5ac:	22 0f       	add	r18, r18
 5ae:	33 1f       	adc	r19, r19
 5b0:	da 95       	dec	r29
 5b2:	e2 f7       	brpl	.-8      	; 0x5ac <randomFlicker+0x6e>
 5b4:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <layer>
 5b8:	29 2b       	or	r18, r25
 5ba:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <layer>
			if (randomColumnMacro == 0)
 5be:	c1 11       	cpse	r28, r1
 5c0:	0f c0       	rjmp	.+30     	; 0x5e0 <randomFlicker+0xa2>
				column12 = SetBit(column12, randomColumn, 1);
 5c2:	21 e0       	ldi	r18, 0x01	; 1
 5c4:	30 e0       	ldi	r19, 0x00	; 0
 5c6:	a9 01       	movw	r20, r18
 5c8:	02 c0       	rjmp	.+4      	; 0x5ce <randomFlicker+0x90>
 5ca:	44 0f       	add	r20, r20
 5cc:	55 1f       	adc	r21, r21
 5ce:	8a 95       	dec	r24
 5d0:	e2 f7       	brpl	.-8      	; 0x5ca <randomFlicker+0x8c>
 5d2:	ca 01       	movw	r24, r20
 5d4:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <column12>
 5d8:	89 2b       	or	r24, r25
 5da:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <column12>
 5de:	10 c0       	rjmp	.+32     	; 0x600 <randomFlicker+0xc2>
			else
				column34 = SetBit(column34, randomColumn, 1);
 5e0:	21 e0       	ldi	r18, 0x01	; 1
 5e2:	30 e0       	ldi	r19, 0x00	; 0
 5e4:	a9 01       	movw	r20, r18
 5e6:	02 c0       	rjmp	.+4      	; 0x5ec <randomFlicker+0xae>
 5e8:	44 0f       	add	r20, r20
 5ea:	55 1f       	adc	r21, r21
 5ec:	8a 95       	dec	r24
 5ee:	e2 f7       	brpl	.-8      	; 0x5e8 <randomFlicker+0xaa>
 5f0:	ca 01       	movw	r24, r20
 5f2:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <column34>
 5f6:	89 2b       	or	r24, r25
 5f8:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <column34>
		break;
		case RF_reset:
			turnEverythingOff();
 5fc:	01 c0       	rjmp	.+2      	; 0x600 <randomFlicker+0xc2>
 5fe:	e4 dd       	rcall	.-1080   	; 0x1c8 <turnEverythingOff>
		break;
	}
}
 600:	df 91       	pop	r29
 602:	cf 91       	pop	r28
 604:	08 95       	ret

00000606 <buttonToggle>:
	//
//}


unsigned char buttonToggle() {
	if (button && !hold) {
 606:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <button>
 60a:	99 23       	and	r25, r25
 60c:	41 f0       	breq	.+16     	; 0x61e <buttonToggle+0x18>
 60e:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <hold>
 612:	81 11       	cpse	r24, r1
 614:	0c c0       	rjmp	.+24     	; 0x62e <buttonToggle+0x28>
		hold = 1;
 616:	81 e0       	ldi	r24, 0x01	; 1
 618:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <hold>
		return 1;
 61c:	08 95       	ret
	}
	else if (!button && hold) {
 61e:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <hold>
 622:	88 23       	and	r24, r24
 624:	29 f0       	breq	.+10     	; 0x630 <buttonToggle+0x2a>
		hold = 0;
 626:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <hold>
		return 0;
 62a:	89 2f       	mov	r24, r25
 62c:	08 95       	ret
	}
	return 0; //(!button && !hold)  and (button && hold)
 62e:	80 e0       	ldi	r24, 0x00	; 0
}
 630:	08 95       	ret

00000632 <tick>:

enum {start, OFF, ON, FO, LC, CC, LE, RF}state;
void tick() {
	switch (state) { //transitions
 632:	e0 91 15 01 	lds	r30, 0x0115	; 0x800115 <state>
 636:	8e 2f       	mov	r24, r30
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	88 30       	cpi	r24, 0x08	; 8
 63c:	91 05       	cpc	r25, r1
 63e:	08 f0       	brcs	.+2      	; 0x642 <tick+0x10>
 640:	55 c0       	rjmp	.+170    	; 0x6ec <tick+0xba>
 642:	fc 01       	movw	r30, r24
 644:	ea 5b       	subi	r30, 0xBA	; 186
 646:	ff 4f       	sbci	r31, 0xFF	; 255
 648:	97 c0       	rjmp	.+302    	; 0x778 <__tablejump2__>
		case start:
			state = OFF;
 64a:	81 e0       	ldi	r24, 0x01	; 1
 64c:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <state>
			break;
		case OFF:
			if (buttonToggle()) {
 650:	57 c0       	rjmp	.+174    	; 0x700 <tick+0xce>
 652:	d9 df       	rcall	.-78     	; 0x606 <buttonToggle>
 654:	88 23       	and	r24, r24
 656:	21 f0       	breq	.+8      	; 0x660 <tick+0x2e>
				state = ON;
 658:	82 e0       	ldi	r24, 0x02	; 2
 65a:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <state>
 65e:	52 c0       	rjmp	.+164    	; 0x704 <tick+0xd2>
			}
			else {
				state = OFF;
 660:	81 e0       	ldi	r24, 0x01	; 1
 662:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <state>
			}
			break;
		case ON:
			if (buttonToggle()) {
 666:	4c c0       	rjmp	.+152    	; 0x700 <tick+0xce>
 668:	ce df       	rcall	.-100    	; 0x606 <buttonToggle>
 66a:	88 23       	and	r24, r24
 66c:	21 f0       	breq	.+8      	; 0x676 <tick+0x44>
				state = FO;
 66e:	83 e0       	ldi	r24, 0x03	; 3
 670:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <state>
 674:	49 c0       	rjmp	.+146    	; 0x708 <tick+0xd6>
			}
			else {
				state = ON;
 676:	82 e0       	ldi	r24, 0x02	; 2
 678:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <state>
			}
			break;
		case FO:
		if (buttonToggle()) {
 67c:	43 c0       	rjmp	.+134    	; 0x704 <tick+0xd2>
 67e:	c3 df       	rcall	.-122    	; 0x606 <buttonToggle>
 680:	88 23       	and	r24, r24
 682:	21 f0       	breq	.+8      	; 0x68c <tick+0x5a>
			state = LC;
 684:	84 e0       	ldi	r24, 0x04	; 4
 686:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <state>
 68a:	40 c0       	rjmp	.+128    	; 0x70c <tick+0xda>
		}
		else {
			state = FO;
 68c:	83 e0       	ldi	r24, 0x03	; 3
 68e:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <state>
		}
		break;
		case LC:
			if (buttonToggle()) {
 692:	3a c0       	rjmp	.+116    	; 0x708 <tick+0xd6>
 694:	b8 df       	rcall	.-144    	; 0x606 <buttonToggle>
 696:	88 23       	and	r24, r24
 698:	21 f0       	breq	.+8      	; 0x6a2 <tick+0x70>
				state = CC;
 69a:	85 e0       	ldi	r24, 0x05	; 5
 69c:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <state>
			}
			else {
				state = LC;
 6a0:	37 c0       	rjmp	.+110    	; 0x710 <tick+0xde>
 6a2:	84 e0       	ldi	r24, 0x04	; 4
 6a4:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <state>
			}
		break;
		case CC:
			if (buttonToggle()) {
 6a8:	31 c0       	rjmp	.+98     	; 0x70c <tick+0xda>
 6aa:	ad df       	rcall	.-166    	; 0x606 <buttonToggle>
 6ac:	88 23       	and	r24, r24
 6ae:	21 f0       	breq	.+8      	; 0x6b8 <tick+0x86>
				state = LE;
 6b0:	86 e0       	ldi	r24, 0x06	; 6
 6b2:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <state>
			}
			else {
				state = CC;
 6b6:	2e c0       	rjmp	.+92     	; 0x714 <tick+0xe2>
 6b8:	85 e0       	ldi	r24, 0x05	; 5
 6ba:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <state>
		}
		break;
		case LE:
			if (buttonToggle()) {
 6be:	28 c0       	rjmp	.+80     	; 0x710 <tick+0xde>
 6c0:	a2 df       	rcall	.-188    	; 0x606 <buttonToggle>
 6c2:	88 23       	and	r24, r24
 6c4:	21 f0       	breq	.+8      	; 0x6ce <tick+0x9c>
				state = RF;
 6c6:	87 e0       	ldi	r24, 0x07	; 7
 6c8:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <state>
			}
			else {
				state = LE;
 6cc:	25 c0       	rjmp	.+74     	; 0x718 <tick+0xe6>
 6ce:	86 e0       	ldi	r24, 0x06	; 6
 6d0:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <state>
			}
		break;
		case RF:
			if (buttonToggle()) {
 6d4:	1f c0       	rjmp	.+62     	; 0x714 <tick+0xe2>
 6d6:	97 df       	rcall	.-210    	; 0x606 <buttonToggle>
 6d8:	88 23       	and	r24, r24
 6da:	21 f0       	breq	.+8      	; 0x6e4 <tick+0xb2>
				state = OFF;
 6dc:	81 e0       	ldi	r24, 0x01	; 1
 6de:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <state>
 6e2:	0e c0       	rjmp	.+28     	; 0x700 <tick+0xce>
			}
			else {
				state = RF;
 6e4:	87 e0       	ldi	r24, 0x07	; 7
 6e6:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <state>
 6ea:	16 c0       	rjmp	.+44     	; 0x718 <tick+0xe6>
			}
		break;
	}
	switch (state) { //ACTIONS
 6ec:	8e 2f       	mov	r24, r30
 6ee:	90 e0       	ldi	r25, 0x00	; 0
 6f0:	fc 01       	movw	r30, r24
 6f2:	31 97       	sbiw	r30, 0x01	; 1
 6f4:	e7 30       	cpi	r30, 0x07	; 7
 6f6:	f1 05       	cpc	r31, r1
 6f8:	80 f4       	brcc	.+32     	; 0x71a <tick+0xe8>
		case OFF:
			turnEverythingOff();
 6fa:	e2 5b       	subi	r30, 0xB2	; 178
			break;
 6fc:	ff 4f       	sbci	r31, 0xFF	; 255
		case ON:
			turnEverythingOn();
 6fe:	3c c0       	rjmp	.+120    	; 0x778 <__tablejump2__>
			break;
 700:	63 dd       	rcall	.-1338   	; 0x1c8 <turnEverythingOff>
		case FO:
			flickerOn();
 702:	0b c0       	rjmp	.+22     	; 0x71a <tick+0xe8>
 704:	82 dd       	rcall	.-1276   	; 0x20a <turnEverythingOn>
			break;
 706:	09 c0       	rjmp	.+18     	; 0x71a <tick+0xe8>
		case LC:
			layerCascade(); //CC, LE, RF
 708:	a1 dd       	rcall	.-1214   	; 0x24c <flickerOn>
 70a:	07 c0       	rjmp	.+14     	; 0x71a <tick+0xe8>
			break;
 70c:	bc dd       	rcall	.-1160   	; 0x286 <layerCascade>
		case CC:
			columnCascade();
 70e:	05 c0       	rjmp	.+10     	; 0x71a <tick+0xe8>
 710:	2a de       	rcall	.-940    	; 0x366 <columnCascade>
			break;
 712:	03 c0       	rjmp	.+6      	; 0x71a <tick+0xe8>
		case LE:
			layerExtend();
 714:	a4 de       	rcall	.-696    	; 0x45e <layerExtend>
 716:	01 c0       	rjmp	.+2      	; 0x71a <tick+0xe8>
			break;
 718:	12 df       	rcall	.-476    	; 0x53e <randomFlicker>
		case RF:
			randomFlicker();
 71a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <layer>
			break;
	}
	PORTA = layer;
 71e:	82 b9       	out	0x02, r24	; 2
 720:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <column12>
	PORTB = column12;
 724:	85 b9       	out	0x05, r24	; 5
 726:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <column34>
	PORTD = column34;
 72a:	8b b9       	out	0x0b, r24	; 11
 72c:	08 95       	ret

0000072e <main>:
 72e:	8f ef       	ldi	r24, 0xFF	; 255
 730:	81 b9       	out	0x01, r24	; 1
}
int main(void) //LC, CC, LE, RF
{
	DDRA = 0xFF; PORTA = 0x00;
 732:	12 b8       	out	0x02, r1	; 2
	DDRC = 0x00; PORTC = 0xFF;
 734:	17 b8       	out	0x07, r1	; 7
 736:	88 b9       	out	0x08, r24	; 8
	DDRB = 0xFF; PORTB = 0x00;
 738:	84 b9       	out	0x04, r24	; 4
 73a:	15 b8       	out	0x05, r1	; 5
	DDRD = 0xFF; PORTD = 0x00;
 73c:	8a b9       	out	0x0a, r24	; 10
 73e:	1b b8       	out	0x0b, r1	; 11
	LC_state = LC_start;
 740:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <LC_state>
	CC_state = CC_start;
 744:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <CC_state>
	LE_state = LE_start;
 748:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <LE_state>
	RF_state = RF_start;
 74c:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <RF_state>
	
	TimerSet(100);
 750:	64 e6       	ldi	r22, 0x64	; 100
 752:	70 e0       	ldi	r23, 0x00	; 0
 754:	80 e0       	ldi	r24, 0x00	; 0
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	26 dd       	rcall	.-1460   	; 0x1a6 <TimerSet>
	TimerOn();
 75a:	c5 dc       	rcall	.-1654   	; 0xe6 <TimerOn>
 75c:	c1 e0       	ldi	r28, 0x01	; 1

    while (1) 
    {
		button = (~PINC & 0x01);
 75e:	86 b1       	in	r24, 0x06	; 6
 760:	8c 27       	eor	r24, r28
 762:	81 70       	andi	r24, 0x01	; 1
 764:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <button>
		tick();
 768:	64 df       	rcall	.-312    	; 0x632 <tick>
 76a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <TimerFlag>
		while(!TimerFlag);
 76e:	88 23       	and	r24, r24
 770:	e1 f3       	breq	.-8      	; 0x76a <main+0x3c>
 772:	c0 93 0e 01 	sts	0x010E, r28	; 0x80010e <TimerFlag>
		TimerFlag = 1;
 776:	f3 cf       	rjmp	.-26     	; 0x75e <main+0x30>

00000778 <__tablejump2__>:
		
    }
 778:	ee 0f       	add	r30, r30
 77a:	ff 1f       	adc	r31, r31
 77c:	00 24       	eor	r0, r0
 77e:	00 1c       	adc	r0, r0
 780:	0b be       	out	0x3b, r0	; 59
 782:	07 90       	elpm	r0, Z+
 784:	f6 91       	elpm	r31, Z
 786:	e0 2d       	mov	r30, r0
 788:	09 94       	ijmp

0000078a <random_r>:
 78a:	8f 92       	push	r8
 78c:	9f 92       	push	r9
 78e:	af 92       	push	r10
 790:	bf 92       	push	r11
 792:	cf 92       	push	r12
 794:	df 92       	push	r13
 796:	ef 92       	push	r14
 798:	ff 92       	push	r15
 79a:	cf 93       	push	r28
 79c:	df 93       	push	r29
 79e:	ec 01       	movw	r28, r24
 7a0:	68 81       	ld	r22, Y
 7a2:	79 81       	ldd	r23, Y+1	; 0x01
 7a4:	8a 81       	ldd	r24, Y+2	; 0x02
 7a6:	9b 81       	ldd	r25, Y+3	; 0x03
 7a8:	61 15       	cp	r22, r1
 7aa:	71 05       	cpc	r23, r1
 7ac:	81 05       	cpc	r24, r1
 7ae:	91 05       	cpc	r25, r1
 7b0:	21 f4       	brne	.+8      	; 0x7ba <random_r+0x30>
 7b2:	64 e2       	ldi	r22, 0x24	; 36
 7b4:	79 ed       	ldi	r23, 0xD9	; 217
 7b6:	8b e5       	ldi	r24, 0x5B	; 91
 7b8:	97 e0       	ldi	r25, 0x07	; 7
 7ba:	2d e1       	ldi	r18, 0x1D	; 29
 7bc:	33 ef       	ldi	r19, 0xF3	; 243
 7be:	41 e0       	ldi	r20, 0x01	; 1
 7c0:	50 e0       	ldi	r21, 0x00	; 0
 7c2:	7f d0       	rcall	.+254    	; 0x8c2 <__divmodsi4>
 7c4:	49 01       	movw	r8, r18
 7c6:	5a 01       	movw	r10, r20
 7c8:	9b 01       	movw	r18, r22
 7ca:	ac 01       	movw	r20, r24
 7cc:	a7 ea       	ldi	r26, 0xA7	; 167
 7ce:	b1 e4       	ldi	r27, 0x41	; 65
 7d0:	94 d0       	rcall	.+296    	; 0x8fa <__muluhisi3>
 7d2:	6b 01       	movw	r12, r22
 7d4:	7c 01       	movw	r14, r24
 7d6:	ac ee       	ldi	r26, 0xEC	; 236
 7d8:	b4 ef       	ldi	r27, 0xF4	; 244
 7da:	a5 01       	movw	r20, r10
 7dc:	94 01       	movw	r18, r8
 7de:	99 d0       	rcall	.+306    	; 0x912 <__mulohisi3>
 7e0:	dc 01       	movw	r26, r24
 7e2:	cb 01       	movw	r24, r22
 7e4:	8c 0d       	add	r24, r12
 7e6:	9d 1d       	adc	r25, r13
 7e8:	ae 1d       	adc	r26, r14
 7ea:	bf 1d       	adc	r27, r15
 7ec:	b7 ff       	sbrs	r27, 7
 7ee:	03 c0       	rjmp	.+6      	; 0x7f6 <random_r+0x6c>
 7f0:	01 97       	sbiw	r24, 0x01	; 1
 7f2:	a1 09       	sbc	r26, r1
 7f4:	b0 48       	sbci	r27, 0x80	; 128
 7f6:	88 83       	st	Y, r24
 7f8:	99 83       	std	Y+1, r25	; 0x01
 7fa:	aa 83       	std	Y+2, r26	; 0x02
 7fc:	bb 83       	std	Y+3, r27	; 0x03
 7fe:	bc 01       	movw	r22, r24
 800:	cd 01       	movw	r24, r26
 802:	9f 77       	andi	r25, 0x7F	; 127
 804:	df 91       	pop	r29
 806:	cf 91       	pop	r28
 808:	ff 90       	pop	r15
 80a:	ef 90       	pop	r14
 80c:	df 90       	pop	r13
 80e:	cf 90       	pop	r12
 810:	bf 90       	pop	r11
 812:	af 90       	pop	r10
 814:	9f 90       	pop	r9
 816:	8f 90       	pop	r8
 818:	08 95       	ret

0000081a <random>:
 81a:	8f 92       	push	r8
 81c:	9f 92       	push	r9
 81e:	af 92       	push	r10
 820:	bf 92       	push	r11
 822:	cf 92       	push	r12
 824:	df 92       	push	r13
 826:	ef 92       	push	r14
 828:	ff 92       	push	r15
 82a:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 82e:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 832:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
 836:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
 83a:	61 15       	cp	r22, r1
 83c:	71 05       	cpc	r23, r1
 83e:	81 05       	cpc	r24, r1
 840:	91 05       	cpc	r25, r1
 842:	21 f4       	brne	.+8      	; 0x84c <random+0x32>
 844:	64 e2       	ldi	r22, 0x24	; 36
 846:	79 ed       	ldi	r23, 0xD9	; 217
 848:	8b e5       	ldi	r24, 0x5B	; 91
 84a:	97 e0       	ldi	r25, 0x07	; 7
 84c:	2d e1       	ldi	r18, 0x1D	; 29
 84e:	33 ef       	ldi	r19, 0xF3	; 243
 850:	41 e0       	ldi	r20, 0x01	; 1
 852:	50 e0       	ldi	r21, 0x00	; 0
 854:	36 d0       	rcall	.+108    	; 0x8c2 <__divmodsi4>
 856:	49 01       	movw	r8, r18
 858:	5a 01       	movw	r10, r20
 85a:	9b 01       	movw	r18, r22
 85c:	ac 01       	movw	r20, r24
 85e:	a7 ea       	ldi	r26, 0xA7	; 167
 860:	b1 e4       	ldi	r27, 0x41	; 65
 862:	4b d0       	rcall	.+150    	; 0x8fa <__muluhisi3>
 864:	6b 01       	movw	r12, r22
 866:	7c 01       	movw	r14, r24
 868:	ac ee       	ldi	r26, 0xEC	; 236
 86a:	b4 ef       	ldi	r27, 0xF4	; 244
 86c:	a5 01       	movw	r20, r10
 86e:	94 01       	movw	r18, r8
 870:	50 d0       	rcall	.+160    	; 0x912 <__mulohisi3>
 872:	dc 01       	movw	r26, r24
 874:	cb 01       	movw	r24, r22
 876:	8c 0d       	add	r24, r12
 878:	9d 1d       	adc	r25, r13
 87a:	ae 1d       	adc	r26, r14
 87c:	bf 1d       	adc	r27, r15
 87e:	b7 ff       	sbrs	r27, 7
 880:	03 c0       	rjmp	.+6      	; 0x888 <random+0x6e>
 882:	01 97       	sbiw	r24, 0x01	; 1
 884:	a1 09       	sbc	r26, r1
 886:	b0 48       	sbci	r27, 0x80	; 128
 888:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 88c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 890:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 894:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 898:	bc 01       	movw	r22, r24
 89a:	cd 01       	movw	r24, r26
 89c:	9f 77       	andi	r25, 0x7F	; 127
 89e:	ff 90       	pop	r15
 8a0:	ef 90       	pop	r14
 8a2:	df 90       	pop	r13
 8a4:	cf 90       	pop	r12
 8a6:	bf 90       	pop	r11
 8a8:	af 90       	pop	r10
 8aa:	9f 90       	pop	r9
 8ac:	8f 90       	pop	r8
 8ae:	08 95       	ret

000008b0 <srandom>:
 8b0:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 8b4:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 8b8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 8bc:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
 8c0:	08 95       	ret

000008c2 <__divmodsi4>:
 8c2:	05 2e       	mov	r0, r21
 8c4:	97 fb       	bst	r25, 7
 8c6:	16 f4       	brtc	.+4      	; 0x8cc <__divmodsi4+0xa>
 8c8:	00 94       	com	r0
 8ca:	0f d0       	rcall	.+30     	; 0x8ea <__negsi2>
 8cc:	57 fd       	sbrc	r21, 7
 8ce:	05 d0       	rcall	.+10     	; 0x8da <__divmodsi4_neg2>
 8d0:	24 d0       	rcall	.+72     	; 0x91a <__udivmodsi4>
 8d2:	07 fc       	sbrc	r0, 7
 8d4:	02 d0       	rcall	.+4      	; 0x8da <__divmodsi4_neg2>
 8d6:	46 f4       	brtc	.+16     	; 0x8e8 <__divmodsi4_exit>
 8d8:	08 c0       	rjmp	.+16     	; 0x8ea <__negsi2>

000008da <__divmodsi4_neg2>:
 8da:	50 95       	com	r21
 8dc:	40 95       	com	r20
 8de:	30 95       	com	r19
 8e0:	21 95       	neg	r18
 8e2:	3f 4f       	sbci	r19, 0xFF	; 255
 8e4:	4f 4f       	sbci	r20, 0xFF	; 255
 8e6:	5f 4f       	sbci	r21, 0xFF	; 255

000008e8 <__divmodsi4_exit>:
 8e8:	08 95       	ret

000008ea <__negsi2>:
 8ea:	90 95       	com	r25
 8ec:	80 95       	com	r24
 8ee:	70 95       	com	r23
 8f0:	61 95       	neg	r22
 8f2:	7f 4f       	sbci	r23, 0xFF	; 255
 8f4:	8f 4f       	sbci	r24, 0xFF	; 255
 8f6:	9f 4f       	sbci	r25, 0xFF	; 255
 8f8:	08 95       	ret

000008fa <__muluhisi3>:
 8fa:	31 d0       	rcall	.+98     	; 0x95e <__umulhisi3>
 8fc:	a5 9f       	mul	r26, r21
 8fe:	90 0d       	add	r25, r0
 900:	b4 9f       	mul	r27, r20
 902:	90 0d       	add	r25, r0
 904:	a4 9f       	mul	r26, r20
 906:	80 0d       	add	r24, r0
 908:	91 1d       	adc	r25, r1
 90a:	11 24       	eor	r1, r1
 90c:	08 95       	ret

0000090e <__mulshisi3>:
 90e:	b7 ff       	sbrs	r27, 7
 910:	f4 cf       	rjmp	.-24     	; 0x8fa <__muluhisi3>

00000912 <__mulohisi3>:
 912:	f3 df       	rcall	.-26     	; 0x8fa <__muluhisi3>
 914:	82 1b       	sub	r24, r18
 916:	93 0b       	sbc	r25, r19
 918:	08 95       	ret

0000091a <__udivmodsi4>:
 91a:	a1 e2       	ldi	r26, 0x21	; 33
 91c:	1a 2e       	mov	r1, r26
 91e:	aa 1b       	sub	r26, r26
 920:	bb 1b       	sub	r27, r27
 922:	fd 01       	movw	r30, r26
 924:	0d c0       	rjmp	.+26     	; 0x940 <__udivmodsi4_ep>

00000926 <__udivmodsi4_loop>:
 926:	aa 1f       	adc	r26, r26
 928:	bb 1f       	adc	r27, r27
 92a:	ee 1f       	adc	r30, r30
 92c:	ff 1f       	adc	r31, r31
 92e:	a2 17       	cp	r26, r18
 930:	b3 07       	cpc	r27, r19
 932:	e4 07       	cpc	r30, r20
 934:	f5 07       	cpc	r31, r21
 936:	20 f0       	brcs	.+8      	; 0x940 <__udivmodsi4_ep>
 938:	a2 1b       	sub	r26, r18
 93a:	b3 0b       	sbc	r27, r19
 93c:	e4 0b       	sbc	r30, r20
 93e:	f5 0b       	sbc	r31, r21

00000940 <__udivmodsi4_ep>:
 940:	66 1f       	adc	r22, r22
 942:	77 1f       	adc	r23, r23
 944:	88 1f       	adc	r24, r24
 946:	99 1f       	adc	r25, r25
 948:	1a 94       	dec	r1
 94a:	69 f7       	brne	.-38     	; 0x926 <__udivmodsi4_loop>
 94c:	60 95       	com	r22
 94e:	70 95       	com	r23
 950:	80 95       	com	r24
 952:	90 95       	com	r25
 954:	9b 01       	movw	r18, r22
 956:	ac 01       	movw	r20, r24
 958:	bd 01       	movw	r22, r26
 95a:	cf 01       	movw	r24, r30
 95c:	08 95       	ret

0000095e <__umulhisi3>:
 95e:	a2 9f       	mul	r26, r18
 960:	b0 01       	movw	r22, r0
 962:	b3 9f       	mul	r27, r19
 964:	c0 01       	movw	r24, r0
 966:	a3 9f       	mul	r26, r19
 968:	70 0d       	add	r23, r0
 96a:	81 1d       	adc	r24, r1
 96c:	11 24       	eor	r1, r1
 96e:	91 1d       	adc	r25, r1
 970:	b2 9f       	mul	r27, r18
 972:	70 0d       	add	r23, r0
 974:	81 1d       	adc	r24, r1
 976:	11 24       	eor	r1, r1
 978:	91 1d       	adc	r25, r1
 97a:	08 95       	ret

0000097c <_exit>:
 97c:	f8 94       	cli

0000097e <__stop_program>:
 97e:	ff cf       	rjmp	.-2      	; 0x97e <__stop_program>
