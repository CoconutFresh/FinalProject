
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000128  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000019c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008ea  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007e2  00000000  00000000  00000b1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000288  00000000  00000000  00001300  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001588  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000430  00000000  00000000  000015bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000107  00000000  00000000  000019ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001af3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	18 d0       	rcall	.+48     	; 0xda <main>
  aa:	3c c0       	rjmp	.+120    	; 0x124 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <buttonToggle>:
unsigned char button = 0x00;
unsigned char hold = 0x00;
unsigned char tempB = 0x00;

unsigned char buttonToggle() {
	if (button && !hold) {
  ae:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <button>
  b2:	99 23       	and	r25, r25
  b4:	41 f0       	breq	.+16     	; 0xc6 <buttonToggle+0x18>
  b6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  ba:	81 11       	cpse	r24, r1
  bc:	0c c0       	rjmp	.+24     	; 0xd6 <buttonToggle+0x28>
		hold = 1;
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		return 1;
  c4:	08 95       	ret
	}
	else if (!button && hold) {
  c6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  ca:	88 23       	and	r24, r24
  cc:	29 f0       	breq	.+10     	; 0xd8 <buttonToggle+0x2a>
		hold = 0;
  ce:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
		return 0;
  d2:	89 2f       	mov	r24, r25
  d4:	08 95       	ret
	}
	return 0; //(!button && !hold)  and (button && hold)
  d6:	80 e0       	ldi	r24, 0x00	; 0
}
  d8:	08 95       	ret

000000da <main>:

int main(void)
{
	DDRB = 0xFF; PORTB = 0x00;
  da:	8f ef       	ldi	r24, 0xFF	; 255
  dc:	84 b9       	out	0x04, r24	; 4
  de:	15 b8       	out	0x05, r1	; 5
	DDRC = 0x00; PORTC = 0xFF;
  e0:	17 b8       	out	0x07, r1	; 7
  e2:	88 b9       	out	0x08, r24	; 8
	}
	return 0; //(!button && !hold)  and (button && hold)
}

int main(void)
{
  e4:	68 94       	set
  e6:	cc 24       	eor	r12, r12
  e8:	c4 f8       	bld	r12, 4
  ea:	68 94       	set
  ec:	dd 24       	eor	r13, r13
  ee:	d2 f8       	bld	r13, 2
  f0:	ff 24       	eor	r15, r15
  f2:	f3 94       	inc	r15
		}
		else {
			input1 = 0x00;
			input2 = 0;
			latch1 = 0;
			latch2 = 0;
  f4:	c0 e0       	ldi	r28, 0x00	; 0
	}
	return 0; //(!button && !hold)  and (button && hold)
}

int main(void)
{
  f6:	00 e4       	ldi	r16, 0x40	; 64
  f8:	1c 2d       	mov	r17, r12
  fa:	dd 2d       	mov	r29, r13
  fc:	ef 2c       	mov	r14, r15
  fe:	04 c0       	rjmp	.+8      	; 0x108 <main+0x2e>
		}
		else {
			input1 = 0x00;
			input2 = 0;
			latch1 = 0;
			latch2 = 0;
 100:	0c 2f       	mov	r16, r28
			latch2 = 0x40;
			PORTB = register1 | register2;
		}
		else {
			input1 = 0x00;
			input2 = 0;
 102:	1c 2f       	mov	r17, r28
			latch1 = 0;
 104:	dc 2f       	mov	r29, r28
			latch1 = 0x04;
			latch2 = 0x40;
			PORTB = register1 | register2;
		}
		else {
			input1 = 0x00;
 106:	ec 2e       	mov	r14, r28
    /* Replace with your application code */
    while (1) 
    {
		register1 = input1 | latch1 | reset1;
		register2 = input2 | latch2 | reset2;
		button = (~PINC & 0x01);
 108:	86 b1       	in	r24, 0x06	; 6
 10a:	8f 25       	eor	r24, r15
 10c:	81 70       	andi	r24, 0x01	; 1
 10e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <button>
		if (buttonToggle()) {
 112:	cd df       	rcall	.-102    	; 0xae <buttonToggle>
 114:	88 23       	and	r24, r24
 116:	a1 f3       	breq	.-24     	; 0x100 <main+0x26>
			input1 = 0x01;
			input2 = 0x10;
			latch1 = 0x04;
			latch2 = 0x40;
			PORTB = register1 | register2;
 118:	de 29       	or	r29, r14
 11a:	d8 68       	ori	r29, 0x88	; 136
 11c:	d0 2b       	or	r29, r16
 11e:	1d 2b       	or	r17, r29
 120:	15 b9       	out	0x05, r17	; 5
 122:	e9 cf       	rjmp	.-46     	; 0xf6 <main+0x1c>

00000124 <_exit>:
 124:	f8 94       	cli

00000126 <__stop_program>:
 126:	ff cf       	rjmp	.-2      	; 0x126 <__stop_program>
